name: Deploy All Services no GitHub Actions

on:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  deploy-services:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout do código
        uses: actions/checkout@v3

      ##############################################
      # Criar rede Docker para comunicação entre containers
      ##############################################
      - name: Criar rede Docker
        run: |
          docker network inspect github_network >/dev/null 2>&1 || \
          docker network create github_network
          echo "Rede github_network criada/confirmada."

      ##############################################
      # Iniciar Zookeeper com retry robusto baseado em logs
      ##############################################
      - name: Iniciar Zookeeper
        run: |
          echo "=============================="
          echo "Iniciando Zookeeper..."
          echo "=============================="
          docker pull confluentinc/cp-zookeeper:7.4.1
          docker run -d \
            --name zookeeper_service \
            --network github_network \
            -e ZOOKEEPER_CLIENT_PORT=2181 \
            -e ZOOKEEPER_TICK_TIME=2000 \
            -p 2181:2181 \
            confluentinc/cp-zookeeper:7.4.1

          MAX_RETRIES=40
          RETRY_COUNT=0
          until docker logs zookeeper_service 2>&1 | grep -q "binding to port 0.0.0.0/0.0.0.0:2181"; do
            RETRY_COUNT=$((RETRY_COUNT+1))
            if [ $RETRY_COUNT -ge $MAX_RETRIES ]; then
              echo "Erro: Zookeeper não iniciou após $MAX_RETRIES tentativas"
              docker logs zookeeper_service
              exit 1
            fi
            echo "Aguardando Zookeeper iniciar... (tentativa $RETRY_COUNT/$MAX_RETRIES)"
            sleep 5
          done
          echo "Zookeeper está pronto!"

      ##############################################
      # Iniciar Kafka com retry robusto baseado em logs
      ##############################################
      - name: Iniciar Kafka
        run: |
          echo "=============================="
          echo "Iniciando Kafka..."
          echo "=============================="
          docker pull confluentinc/cp-kafka:7.4.1
          docker run -d \
            --name kafka_service \
            --network github_network \
            -e KAFKA_BROKER_ID=1 \
            -e KAFKA_ZOOKEEPER_CONNECT=zookeeper_service:2181 \
            -e KAFKA_ADVERTISED_LISTENERS=PLAINTEXT://localhost:9092 \
            -e KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR=1 \
            -p 9092:9092 \
            confluentinc/cp-kafka:7.4.1

          MAX_RETRIES=40
          RETRY_COUNT=0
          until docker logs kafka_service 2>&1 | grep -q "started \(kafka.server.KafkaServer\)"; do
            RETRY_COUNT=$((RETRY_COUNT+1))
            if [ $RETRY_COUNT -ge $MAX_RETRIES ]; then
              echo "Erro: Kafka não iniciou após $MAX_RETRIES tentativas"
              docker logs kafka_service
              exit 1
            fi
            echo "Aguardando Kafka iniciar... (tentativa $RETRY_COUNT/$MAX_RETRIES)"
            sleep 5
          done
          echo "Kafka está pronto!"

      ##############################################
      # Iniciar Postgres
      ##############################################
      - name: Iniciar Postgres
        run: |
          echo "=============================="
          echo "Iniciando Postgres..."
          echo "=============================="
          docker pull postgres:15
          docker run -d \
            --name postgres_service \
            --network github_network \
            -e POSTGRES_USER=admin \
            -e POSTGRES_PASSWORD=admin \
            -e POSTGRES_DB=mydb \
            -p 5432:5432 \
            postgres:15
          echo "Postgres iniciado com usuário 'admin' e banco 'mydb'."

      ##############################################
      # Listar containers ativos
      ##############################################
      - name: Verificar containers
        run: |
          echo "=============================="
          echo "Containers ativos:"
          echo "=============================="
          docker ps -a
