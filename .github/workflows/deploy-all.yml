name: Deploy Completo

on:
  push:
    branches:
      - main

jobs:
  deploy:
    runs-on: ubuntu-latest
    env:
      DOCKER_BUILDKIT: 1

    services:
      # Serviço do Postgres
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: appdb
        ports:
          - 5432:5432
        options: >-
          --health-cmd="pg_isready -U postgres -d appdb"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=5

      # Serviço do Zookeeper
      zookeeper:
        image: confluentinc/cp-zookeeper:7.4.1
        env:
          ZOOKEEPER_CLIENT_PORT: 2181
          ZOOKEEPER_TICK_TIME: 2000
        ports:
          - 2181:2181
        options: >-
          --health-cmd="echo ruok | nc localhost 2181 | grep imok"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=24

      # Serviço do Kafka
      kafka:
        image: confluentinc/cp-kafka:7.4.1
        env:
          KAFKA_BROKER_ID: 1
          KAFKA_ZOOKEEPER_CONNECT: localhost:2181
          KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://localhost:9092
          KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
        ports:
          - 9092:9092
        options: >-
          --health-cmd="kafka-topics --bootstrap-server localhost:9092 --list"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=24

    steps:
      # Passo 1: Checkout do código
      - name: Fazer checkout do repositório
        uses: actions/checkout@v3

      # Passo 2: Configurar Java 17 para Spring Boot
      - name: Configurar Java
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'

      # Passo 3: Build do backend Spring Boot
      - name: Build backend (Spring Boot)
        working-directory: backend
        run: |
          ./mvnw clean package -DskipTests

      # Passo 4: Build do frontend Angular
      - name: Build frontend (Angular)
        working-directory: frontend
        run: |
          npm ci
          npm run build -- --output-path=dist

      # Passo 5: Build das imagens Docker
      - name: Build imagens Docker
        run: |
          docker build -t meu-app-backend:latest backend/.
          docker build -t meu-app-frontend:latest frontend/.

      # Passo 6: Subir containers de infraestrutura (Postgres, Zookeeper, Kafka)
      - name: Subir containers de infraestrutura
        run: |
          docker network create infra_microservices-net || true
          docker-compose -f docker-compose.infra.yml up -d

      # Passo 7: Esperar serviços ficarem prontos
      - name: Esperar serviços ficarem prontos
        run: |
          echo "Aguardando Postgres..."
          until docker inspect --format='{{.State.Health.Status}}' infra_postgres_1 | grep healthy; do
            sleep 5
          done
          echo "Postgres pronto!"

          echo "Aguardando Zookeeper..."
          until docker inspect --format='{{.State.Health.Status}}' infra_zookeeper_1 | grep healthy; do
            sleep 5
          done
          echo "Zookeeper pronto!"

          echo "Aguardando Kafka..."
          until docker inspect --format='{{.State.Health.Status}}' infra_kafka_1 | grep healthy; do
            sleep 5
          done
          echo "Kafka pronto!"

      # Passo 8: Subir containers do aplicativo
      - name: Subir containers do aplicativo
        run: |
          docker-compose -f docker-compose.app.yml up -d

      # Passo 9: Limpeza de containers antigos e dangling images
      - name: Limpar containers e imagens antigas
        run: |
          docker system prune -f
