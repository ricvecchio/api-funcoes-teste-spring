name: CI/CD Microservi√ßos

on:
  push:
    branches: [ main ]

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout do c√≥digo
        uses: actions/checkout@v4

      - name: Configurar JDK 21
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '21'
          cache: 'maven'

      - name: Build e Teste Projeto Raiz
        run: |
          echo "üèóÔ∏è Building projeto raiz..."
          mvn clean install -DskipTests=false

      - name: Build Conta Service
        run: |
          echo "üîß Building Conta Service..."
          cd conta-service
          mvn clean package -DskipTests=true
          echo "‚úÖ Conta Service build completo"

      - name: Build Kafka Service
        run: |
          echo "üîß Building Kafka Service..."
          cd kafka-service
          mvn clean package -DskipTests=true
          echo "‚úÖ Kafka Service build completo"

  docker-integration:
    runs-on: ubuntu-latest
    needs: build-and-test
    steps:
      - name: Checkout do c√≥digo
        uses: actions/checkout@v4

      - name: Configurar Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Instalar depend√™ncias do sistema
        run: |
          sudo apt-get update
          sudo apt-get install -y curl jq

      - name: Build das Imagens Docker
        run: |
          echo "üê≥ Build das imagens Docker..."
          docker build -t conta-service:latest -f conta-service/Dockerfile ./conta-service
          docker build -t kafka-service:latest -f kafka-service/Dockerfile ./kafka-service
          echo "‚úÖ Imagens Docker constru√≠das"

      - name: Criar docker-compose-ci.yml
        run: |
          cat > docker-compose-ci.yml << 'DOCKERCOMPOSE'
          version: '3.8'

          services:
            postgres:
              image: postgres:15-alpine
              container_name: postgres-db
              environment:
                POSTGRES_DB: conta_db
                POSTGRES_USER: postgres
                POSTGRES_PASSWORD: password
                POSTGRES_INITDB_ARGS: "--encoding=UTF8"
              ports:
                - "5432:5432"
              networks:
                - microservices-net
              healthcheck:
                test: ["CMD-SHELL", "pg_isready -U postgres"]
                interval: 10s
                timeout: 5s
                retries: 5
                start_period: 10s

            zookeeper:
              image: confluentinc/cp-zookeeper:7.5.0
              container_name: zookeeper
              environment:
                ZOOKEEPER_CLIENT_PORT: 2181
                ZOOKEEPER_TICK_TIME: 2000
              ports:
                - "2181:2181"
              networks:
                - microservices-net
              healthcheck:
                test: ["CMD-SHELL", "echo ruok | nc localhost 2181 | grep imok"]
                interval: 10s
                timeout: 5s
                retries: 5

            kafka-broker:
              image: confluentinc/cp-kafka:7.5.0
              container_name: kafka-broker
              environment:
                KAFKA_BROKER_ID: 1
                KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
                KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka-broker:9092,PLAINTEXT_HOST://localhost:9092
                KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
                KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
                KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
                KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
                KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
              ports:
                - "9092:9092"
              networks:
                - microservices-net
              depends_on:
                zookeeper:
                  condition: service_healthy
              healthcheck:
                test: ["CMD-SHELL", "kafka-topics --bootstrap-server localhost:9092 --list"]
                interval: 15s
                timeout: 10s
                retries: 10
                start_period: 30s

            conta-service:
              image: conta-service:latest
              container_name: conta-service
              ports:
                - "8081:8080"
              environment:
                SPRING_PROFILES_ACTIVE: docker
                # Override espec√≠ficos se necess√°rio
                SPRING_DATASOURCE_URL: jdbc:postgresql://postgres:5432/conta_db
                SPRING_KAFKA_BOOTSTRAP_SERVERS: kafka-broker:9092
              networks:
                - microservices-net
              depends_on:
                postgres:
                  condition: service_healthy
                kafka-broker:
                  condition: service_healthy
              healthcheck:
                test: ["CMD", "curl", "-f", "http://localhost:8080/api/actuator/health"]
                interval: 20s
                timeout: 10s
                retries: 8
                start_period: 90s

            kafka-service:
              image: kafka-service:latest
              container_name: kafka-service
              ports:
                - "8082:8080"
              environment:
                SPRING_PROFILES_ACTIVE: docker
                # Override espec√≠ficos se necess√°rio
                SPRING_DATASOURCE_URL: jdbc:postgresql://postgres:5432/conta_db
                SPRING_KAFKA_BOOTSTRAP_SERVERS: kafka-broker:9092
              networks:
                - microservices-net
              depends_on:
                postgres:
                  condition: service_healthy
                kafka-broker:
                  condition: service_healthy
              healthcheck:
                test: ["CMD", "curl", "-f", "http://localhost:8080/api/actuator/health"]
                interval: 20s
                timeout: 10s
                retries: 8
                start_period: 90s

          networks:
            microservices-net:
              driver: bridge
          DOCKERCOMPOSE

      - name: Executar Docker Compose
        run: |
          echo "üöÄ Iniciando infraestrutura..."
          docker compose -f docker-compose-ci.yml up -d postgres zookeeper
          
          echo "‚è≥ Aguardando Zookeeper..."
          sleep 30
          
          docker compose -f docker-compose-ci.yml up -d kafka-broker
          
          echo "‚è≥ Aguardando infraestrutura ficar pronta..."
          sleep 90

          echo "üîç Verificando sa√∫de da infraestrutura..."
          echo "=== Status dos containers ==="
          docker compose -f docker-compose-ci.yml ps
          
          echo "=== Logs PostgreSQL ==="
          docker compose -f docker-compose-ci.yml logs postgres --tail=50
          echo "=== Logs Zookeeper ==="
          docker compose -f docker-compose-ci.yml logs zookeeper --tail=20
          echo "=== Logs Kafka ==="
          docker compose -f docker-compose-ci.yml logs kafka-broker --tail=50

          echo "üîç Testando conectividade com Kafka..."
          docker exec kafka-broker kafka-topics --bootstrap-server localhost:9092 --list || echo "Kafka ainda n√£o est√° pronto"

          echo "üöÄ Iniciando servi√ßos de aplica√ß√£o..."
          docker compose -f docker-compose-ci.yml up -d conta-service kafka-service
          
          echo "‚è≥ Aguardando servi√ßos ficarem prontos (180 segundos)..."
          sleep 180

          echo "üîç Verificando estado dos servi√ßos..."
          docker compose -f docker-compose-ci.yml ps
          echo "=== Logs Conta Service ==="
          docker compose -f docker-compose-ci.yml logs conta-service --tail=100
          echo "=== Logs Kafka Service ==="
          docker compose -f docker-compose-ci.yml logs kafka-service --tail=100

          echo "üè• Executando health checks..."

          echo "üîç Testando Conta Service..."
          max_retries=25
          retry_count=0
          while [ $retry_count -lt $max_retries ]; do
            if curl -s -f http://localhost:8081/actuator/health > /dev/null 2>&1; then
              echo "‚úÖ CONTA SERVICE: HEALTH CHECK PASSOU"
              echo "Status completo:"
              curl -s http://localhost:8081/actuator/health | jq . || echo "JSON parse falhou, mas health check passou"
              break
            else
              echo "‚è≥ Conta Service n√£o est√° pronto... tentativa $((retry_count + 1))/$max_retries"
              sleep 15
              retry_count=$((retry_count + 1))
              # Logar estado atual do servi√ßo
              docker compose -f docker-compose-ci.yml logs conta-service --tail=5 || true
            fi
          done

          if [ $retry_count -eq $max_retries ]; then
            echo "‚ùå CONTA SERVICE: HEALTH CHECK FALHOU ap√≥s $max_retries tentativas"
            echo "=== √öltimos logs do Conta Service ==="
            docker compose -f docker-compose-ci.yml logs conta-service --tail=50
            echo "=== Logs do PostgreSQL ==="
            docker compose -f docker-compose-ci.yml logs postgres --tail=20
            echo "=== Logs do Kafka ==="
            docker compose -f docker-compose-ci.yml logs kafka-broker --tail=20
            exit 1
          fi

          echo "üîç Testando Kafka Service..."
          retry_count=0
          while [ $retry_count -lt $max_retries ]; do
            if curl -s -f http://localhost:8082/actuator/health > /dev/null 2>&1; then
              echo "‚úÖ KAFKA SERVICE: HEALTH CHECK PASSOU"
              echo "Status completo:"
              curl -s http://localhost:8082/actuator/health | jq . || echo "JSON parse falhou, mas health check passou"
              break
            else
              echo "‚è≥ Kafka Service n√£o est√° pronto... tentativa $((retry_count + 1))/$max_retries"
              sleep 15
              retry_count=$((retry_count + 1))
              # Logar estado atual do servi√ßo
              docker compose -f docker-compose-ci.yml logs kafka-service --tail=5 || true
            fi
          done

          if [ $retry_count -eq $max_retries ]; then
            echo "‚ùå KAFKA SERVICE: HEALTH CHECK FALHOU ap√≥s $max_retries tentativas"
            echo "=== √öltimos logs do Kafka Service ==="
            docker compose -f docker-compose-ci.yml logs kafka-service --tail=50
            echo "=== Logs do PostgreSQL ==="
            docker compose -f docker-compose-ci.yml logs postgres --tail=20
            echo "=== Logs do Kafka Broker ==="
            docker compose -f docker-compose-ci.yml logs kafka-broker --tail=20
            exit 1
          fi

          echo "üéâ TODOS OS TESTES DE INTEGRA√á√ÉO PASSARAM!"

      - name: Limpar Ambiente
        if: always()
        run: |
          docker compose -f docker-compose-ci.yml down -v --remove-orphans
          docker system prune -f
          echo "üßπ Ambiente limpo"

  security-scan:
    runs-on: ubuntu-latest
    needs: build-and-test
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Security Scan
        uses: dependency-check/Dependency-Check_Action@main
        with:
          project: 'api-funcoes-teste-spring'
          path: '.'
          format: 'HTML'
          args: |
            --failOnCVSS 7
            --scan conta-service/
            --scan kafka-service/

      - name: Upload Report
        uses: actions/upload-artifact@v4
        with:
          name: security-reports
          path: reports/