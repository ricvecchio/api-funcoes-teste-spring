name: CI/CD - Microservices Infra

on:
  push:
    branches: [ main ]

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    env:
      CONTA_SERVICE_PATH: ./conta-service
      KAFKA_SERVICE_PATH: ./kafka-service
      INFRA_PATH: ./infra
      CONTA_SERVICE_PORT: 8081
      KAFKA_SERVICE_PORT: 8082

    steps:
      - name: üì• Checkout do reposit√≥rio
        uses: actions/checkout@v4

      - name: ‚òï Configurar JDK 21
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: 21
          cache: maven

      - name: üß± Build dos servi√ßos
        run: |
          cd ${CONTA_SERVICE_PATH} && mvn clean package -DskipTests -q
          cd ../${KAFKA_SERVICE_PATH} && mvn clean package -DskipTests -q

      - name: üß© Instalar depend√™ncias auxiliares
        run: sudo apt-get update && sudo apt-get install -y curl netcat-openbsd

      - name: üê≥ Build das imagens Docker
        run: |
          docker build --build-arg SERVER_PORT=${CONTA_SERVICE_PORT} -t conta-service:latest -f ${CONTA_SERVICE_PATH}/Dockerfile ${CONTA_SERVICE_PATH}
          docker build --build-arg SERVER_PORT=${KAFKA_SERVICE_PORT} -t kafka-service:latest -f ${KAFKA_SERVICE_PATH}/Dockerfile ${KAFKA_SERVICE_PATH}

      - name: üöÄ Subir ambiente Docker Compose (depend√™ncias)
        run: |
          cd ${INFRA_PATH}
          docker compose --env-file .env up -d --build postgres-db zookeeper kafka-broker

      - name: üïì Aguardar depend√™ncias ficarem saud√°veis
        run: |
          echo "‚è≥ Aguardando servi√ßos dependentes (Postgres, Zookeeper, Kafka Broker)..."
          services=("postgres-db" "zookeeper" "kafka-broker")
          max_attempts=30
          sleep_interval=10

          for service in "${services[@]}"; do
            attempt=1
            while [ $attempt -le $max_attempts ]; do
              status=$(docker inspect -f '{{.State.Health.Status}}' $service 2>/dev/null || echo "unknown")
              echo "‚è± [$service] Tentativa $attempt/$max_attempts -> Status: $status"
              if [ "$status" == "healthy" ]; then
                echo "‚úÖ $service saud√°vel!"
                break
              fi
              sleep $sleep_interval
              attempt=$((attempt + 1))
            done
            if [ "$status" != "healthy" ]; then
              echo "‚ùå $service n√£o ficou saud√°vel ap√≥s $max_attempts tentativas."
              exit 1
            fi
          done
          echo "‚úÖ Todos os servi√ßos dependentes est√£o saud√°veis!"

      - name: üöÄ Subir microservices
        run: |
          cd ${INFRA_PATH}
          docker compose --env-file .env up -d --build conta-service kafka-service

      - name: üïì Aguardar microservices ficarem saud√°veis
        run: |
          echo "‚è≥ Aguardando microservices (Conta Service e Kafka Service)..."
          services=("conta-service" "kafka-service")
          max_attempts=30
          sleep_interval=10

          for service in "${services[@]}"; do
            attempt=1
            while [ $attempt -le $max_attempts ]; do
              status=$(docker inspect -f '{{.State.Health.Status}}' $service 2>/dev/null || echo "unknown")
              echo "‚è± [$service] Tentativa $attempt/$max_attempts -> Status: $status"
              if [ "$status" == "healthy" ]; then
                echo "‚úÖ $service saud√°vel!"
                break
              fi
              sleep $sleep_interval
              attempt=$((attempt + 1))
            done
            if [ "$status" != "healthy" ]; then
              echo "‚ùå $service n√£o ficou saud√°vel ap√≥s $max_attempts tentativas."
              docker logs $service || true
              exit 1
            fi
          done
          echo "‚úÖ Todos os microservices est√£o saud√°veis!"
          docker compose ps

      - name: üîç Testar endpoints
        run: |
          curl -f http://localhost:${CONTA_SERVICE_PORT}/actuator/health
          curl -f http://localhost:${KAFKA_SERVICE_PORT}/actuator/health

      - name: üß™ Executar testes Maven
        run: |
          cd ${CONTA_SERVICE_PATH} && mvn test -q
          cd ../${KAFKA_SERVICE_PATH} && mvn test -q

      - name: üìÑ Logs em caso de falha
        if: failure()
        run: |
          docker logs conta-service || true
          docker logs kafka-service || true
          docker logs postgres-db || true
          docker logs kafka-broker || true
          docker logs zookeeper || true

      - name: üßπ Limpeza final
        if: always()
        run: |
          cd ${INFRA_PATH}
          docker compose down -v --remove-orphans
          docker system prune -af
