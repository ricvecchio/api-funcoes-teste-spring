name: CI/CD Microserviços

on:
  push:
    branches: [ main ]

env:
  JAVA_VERSION: '21'
  DOCKER_BUILDKIT: 1
  COMPOSE_DOCKER_CLI_BUILD: 1

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        service: [conta-service, kafka-service]

    steps:
      - name: "[1] Checkout do código"
        uses: actions/checkout@v4

      - name: "[2] Configurar JDK ${{ env.JAVA_VERSION }}"
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: ${{ env.JAVA_VERSION }}
          cache: 'maven'

      - name: "[3] Build Projeto Raiz"
        run: |
          echo "🏗️  Building projeto raiz..."
          mvn clean install -DskipTests -q
          echo "✅ Build projeto raiz concluído"

      - name: "[4] Build e Testes ${{ matrix.service }}"
        run: |
          echo "🔧 Building ${{ matrix.service }}..."
          cd ${{ matrix.service }}
          mvn clean compile test -q
          echo "✅ ${{ matrix.service }} build e testes concluídos"

  docker-integration:
    runs-on: ubuntu-latest
    needs: build-and-test
    timeout-minutes: 25

    steps:
      - name: "[1] Checkout do código"
        uses: actions/checkout@v4

      - name: "[2] Configurar Docker Buildx"
        uses: docker/setup-buildx-action@v3

      - name: "[3] Build das Imagens Docker"
        run: |
          echo "🐳 Build das imagens Docker..."
          
          echo "🔨 Build Conta Service..."
          docker build \
            -t conta-service:latest \
            -f conta-service/Dockerfile \
            .
          
          echo "🔨 Build Kafka Service..."
          docker build \
            -t kafka-service:latest \
            -f kafka-service/Dockerfile \
            .
          
          echo "✅ Build das imagens concluído"

      - name: "[4] Iniciar Infraestrutura"
        run: |
          echo "🚀 Iniciando infraestrutura..."
          cd infra
          
          # Limpar ambiente anterior
          docker compose down -v --remove-orphans
          
          # Iniciar apenas infraestrutura primeiro
          docker compose up -d postgres zookeeper kafka-broker
          
          echo "⏳ Aguardando infraestrutura ficar pronta..."
          sleep 60

      - name: "[5] Verificar Infraestrutura"
        run: |
          echo "🔍 Verificando infraestrutura..."
          cd infra
          
          echo "📊 Status dos containers de infra:"
          docker compose ps
          
          # Verificar se todos os serviços de infra estão saudáveis
          echo "🏥 Verificando saúde da infraestrutura..."
          docker compose logs postgres --tail=5
          docker compose logs zookeeper --tail=5
          docker compose logs kafka-broker --tail=10

      - name: "[6] Iniciar Microserviços"
        run: |
          echo "🚀 Iniciando microserviços..."
          cd infra
          
          # Iniciar microserviços após infra estar pronta
          docker compose up -d conta-service kafka-service
          
          echo "⏳ Aguardando microserviços iniciarem..."
          sleep 90

      - name: "[7] Verificar Logs dos Microserviços"
        run: |
          echo "📝 Verificando logs dos microserviços..."
          cd infra
          
          echo "=== LOGS CONTA SERVICE ==="
          docker compose logs conta-service --tail=50
          
          echo "=== LOGS KAFKA SERVICE ==="
          docker compose logs kafka-service --tail=50
          
          echo "📊 Status final dos containers:"
          docker compose ps

      - name: "[8] Testar Health Checks com Abordagem Robusta"
        run: |
          echo "🏥 Testando health checks com abordagem robusta..."
          cd infra
          
          # Função para testar health check com retry
          test_health_check() {
            local service_name=$1
            local port=$2
            local max_attempts=15
            local attempt=1
          
            echo "🔍 Testando $service_name na porta $port..."
          
            while [ $attempt -le $max_attempts ]; do
              if curl -s -f "http://localhost:$port/actuator/health" > /dev/null 2>&1; then
                echo "✅✅ $service_name: HEALTHY (tentativa $attempt)"
                return 0
              else
                echo "⏳ $service_name: Aguardando... tentativa $attempt/$max_attempts"
                sleep 10
                attempt=$((attempt + 1))
              fi
            done
          
            echo "❌❌ $service_name: HEALTH CHECK FALHOU após $max_attempts tentativas"
            return 1
          }
          
          # Testar serviços
          if test_health_check "Conta Service" "8081"; then
            echo "🎯 CONTA SERVICE: TESTE DE SAÚDE PASSOU"
          else
            echo "💥 CONTA SERVICE: TESTE DE SAÚDE FALHOU"
            # Coletar logs detalhados antes de falhar
            docker compose logs conta-service --tail=100
            exit 1
          fi
          
          if test_health_check "Kafka Service" "8082"; then
            echo "🎯 KAFKA SERVICE: TESTE DE SAÚDE PASSOU"
          else
            echo "💥 KAFKA SERVICE: TESTE DE SAÚDE FALHOU"
            # Coletar logs detalhados antes de falhar
            docker compose logs kafka-service --tail=100
            exit 1
          fi
          
          echo "🎉🎉 TODOS OS SERVIÇOS ESTÃO SAUDÁVEIS!"

      - name: "[9] Testes Adicionais de Funcionalidade"
        if: success()
        run: |
          echo "🧪 Executando testes adicionais de funcionalidade..."
          cd infra
          
          # Testar endpoints específicos
          echo "🔍 Testando endpoints de info..."
          curl -s http://localhost:8081/actuator/info | jq '.' || echo "Info endpoint não disponível"
          curl -s http://localhost:8082/actuator/info | jq '.' || echo "Info endpoint não disponível"
          
          echo "✅ Testes adicionais concluídos"

      - name: "[10] Coletar Logs em Caso de Falha"
        if: failure()
        run: |
          echo "📝 Coletando logs detalhados para análise..."
          cd infra
          
          # Salvar todos os logs
          docker compose logs > docker-compose-full-logs.txt
          docker compose logs conta-service > conta-service-full-logs.txt
          docker compose logs kafka-service > kafka-service-full-logs.txt
          docker compose logs kafka-broker > kafka-broker-full-logs.txt
          docker compose logs postgres > postgres-full-logs.txt
          
          # Exibir resumo dos logs
          echo "=== RESUMO DOS LOGS ==="
          echo "CONTA SERVICE (últimas 50 linhas):"
          tail -50 conta-service-full-logs.txt
          echo ""
          echo "KAFKA SERVICE (últimas 50 linhas):"
          tail -50 kafka-service-full-logs.txt
          echo ""
          echo "KAFKA BROKER (últimas 30 linhas):"
          tail -30 kafka-broker-full-logs.txt

      - name: "[11] Limpar Ambiente"
        if: always()
        run: |
          cd infra
          docker compose down -v --remove-orphans
          echo "🧹 Ambiente limpo"

  security-scan:
    runs-on: ubuntu-latest
    needs: build-and-test

    steps:
      - name: "[1] Checkout"
        uses: actions/checkout@v4

      - name: "[2] Security Scan"
        uses: dependency-check/Dependency-Check_Action@main
        with:
          project: 'api-funcoes-teste-spring'
          path: '.'
          format: 'HTML'
          args: >
            --failOnCVSS 7
            --scan conta-service/
            --scan kafka-service/

      - name: "[3] Upload Report"
        uses: actions/upload-artifact@v4
        with:
          name: security-reports
          path: reports/