name: CI/CD Microservi√ßos

on:
  push:
    branches: [ main ]

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout do c√≥digo
        uses: actions/checkout@v4

      - name: Configurar JDK 21
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '21'
          cache: 'maven'

      - name: Build Projeto Raiz
        run: |
          echo "üèóÔ∏è  Building projeto raiz..."
          mvn clean install -DskipTests -q

      - name: Build Conta Service
        run: |
          echo "üîß Building Conta Service..."
          cd conta-service
          mvn clean compile -DskipTests -q
          echo "‚úÖ Conta Service compilado"

      - name: Build Kafka Service
        run: |
          echo "üîß Building Kafka Service..."
          cd kafka-service
          mvn clean compile -DskipTests -q
          echo "‚úÖ Kafka Service compilado"

  docker-integration:
    runs-on: ubuntu-latest
    needs: build-and-test
    steps:
      - name: Checkout do c√≥digo
        uses: actions/checkout@v4

      - name: Configurar Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build das Imagens Docker
        run: |
          echo "üê≥ Build das imagens Docker..."
          docker build -t conta-service:latest -f conta-service/Dockerfile .
          docker build -t kafka-service:latest -f kafka-service/Dockerfile .
          echo "‚úÖ Imagens Docker constru√≠das"

      - name: Criar docker-compose.yml
        run: |
          echo "version: '3.8'" > docker-compose-ci.yml
          echo "" >> docker-compose-ci.yml
          echo "services:" >> docker-compose-ci.yml
          echo "  postgres:" >> docker-compose-ci.yml
          echo "    image: postgres:15-alpine" >> docker-compose-ci.yml
          echo "    container_name: postgres-db" >> docker-compose-ci.yml
          echo "    environment:" >> docker-compose-ci.yml
          echo "      POSTGRES_DB: conta_db" >> docker-compose-ci.yml
          echo "      POSTGRES_USER: postgres" >> docker-compose-ci.yml
          echo "      POSTGRES_PASSWORD: password" >> docker-compose-ci.yml
          echo "    ports:" >> docker-compose-ci.yml
          echo "      - \"5432:5432\"" >> docker-compose-ci.yml
          echo "    networks:" >> docker-compose-ci.yml
          echo "      - microservices-net" >> docker-compose-ci.yml
          echo "" >> docker-compose-ci.yml
          echo "  zookeeper:" >> docker-compose-ci.yml
          echo "    image: confluentinc/cp-zookeeper:7.5.0" >> docker-compose-ci.yml
          echo "    container_name: zookeeper" >> docker-compose-ci.yml
          echo "    environment:" >> docker-compose-ci.yml
          echo "      ZOOKEEPER_CLIENT_PORT: 2181" >> docker-compose-ci.yml
          echo "    ports:" >> docker-compose-ci.yml
          echo "      - \"2181:2181\"" >> docker-compose-ci.yml
          echo "    networks:" >> docker-compose-ci.yml
          echo "      - microservices-net" >> docker-compose-ci.yml
          echo "" >> docker-compose-ci.yml
          echo "  kafka-broker:" >> docker-compose-ci.yml
          echo "    image: confluentinc/cp-kafka:7.5.0" >> docker-compose-ci.yml
          echo "    container_name: kafka-broker" >> docker-compose-ci.yml
          echo "    environment:" >> docker-compose-ci.yml
          echo "      KAFKA_BROKER_ID: 1" >> docker-compose-ci.yml
          echo "      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181" >> docker-compose-ci.yml
          echo "      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka-broker:9092" >> docker-compose-ci.yml
          echo "      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1" >> docker-compose-ci.yml
          echo "    ports:" >> docker-compose-ci.yml
          echo "      - \"9092:9092\"" >> docker-compose-ci.yml
          echo "    networks:" >> docker-compose-ci.yml
          echo "      - microservices-net" >> docker-compose-ci.yml
          echo "    depends_on:" >> docker-compose-ci.yml
          echo "      - zookeeper" >> docker-compose-ci.yml
          echo "" >> docker-compose-ci.yml
          echo "  conta-service:" >> docker-compose-ci.yml
          echo "    image: conta-service:latest" >> docker-compose-ci.yml
          echo "    container_name: conta-service" >> docker-compose-ci.yml
          echo "    ports:" >> docker-compose-ci.yml
          echo "      - \"8081:8080\"" >> docker-compose-ci.yml
          echo "    environment:" >> docker-compose-ci.yml
          echo "      SPRING_DATASOURCE_URL: jdbc:postgresql://postgres:5432/conta_db" >> docker-compose-ci.yml
          echo "      SPRING_DATASOURCE_USERNAME: postgres" >> docker-compose-ci.yml
          echo "      SPRING_DATASOURCE_PASSWORD: password" >> docker-compose-ci.yml
          echo "      SPRING_KAFKA_BOOTSTRAP_SERVERS: kafka-broker:9092" >> docker-compose-ci.yml
          echo "      SPRING_JPA_HIBERNATE_DDL_AUTO: update" >> docker-compose-ci.yml
          echo "    networks:" >> docker-compose-ci.yml
          echo "      - microservices-net" >> docker-compose-ci.yml
          echo "    depends_on:" >> docker-compose-ci.yml
          echo "      - postgres" >> docker-compose-ci.yml
          echo "      - kafka-broker" >> docker-compose-ci.yml
          echo "" >> docker-compose-ci.yml
          echo "  kafka-service:" >> docker-compose-ci.yml
          echo "    image: kafka-service:latest" >> docker-compose-ci.yml
          echo "    container_name: kafka-service" >> docker-compose-ci.yml
          echo "    ports:" >> docker-compose-ci.yml
          echo "      - \"8082:8080\"" >> docker-compose-ci.yml
          echo "    environment:" >> docker-compose-ci.yml
          echo "      SPRING_DATASOURCE_URL: jdbc:postgresql://postgres:5432/conta_db" >> docker-compose-ci.yml
          echo "      SPRING_DATASOURCE_USERNAME: postgres" >> docker-compose-ci.yml
          echo "      SPRING_DATASOURCE_PASSWORD: password" >> docker-compose-ci.yml
          echo "      SPRING_KAFKA_BOOTSTRAP_SERVERS: kafka-broker:9092" >> docker-compose-ci.yml
          echo "      SPRING_KAFKA_CONSUMER_GROUP_ID: kafka-service-group" >> docker-compose-ci.yml
          echo "      SPRING_JPA_HIBERNATE_DDL_AUTO: update" >> docker-compose-ci.yml
          echo "    networks:" >> docker-compose-ci.yml
          echo "      - microservices-net" >> docker-compose-ci.yml
          echo "    depends_on:" >> docker-compose-ci.yml
          echo "      - postgres" >> docker-compose-ci.yml
          echo "      - kafka-broker" >> docker-compose-ci.yml
          echo "" >> docker-compose-ci.yml
          echo "networks:" >> docker-compose-ci.yml
          echo "  microservices-net:" >> docker-compose-ci.yml
          echo "    driver: bridge" >> docker-compose-ci.yml

      - name: Executar Docker Compose
        run: |
          echo "üöÄ Iniciando infraestrutura..."
          docker compose -f docker-compose-ci.yml up -d postgres zookeeper kafka-broker
          sleep 30
          
          echo "üîç Verificando infraestrutura..."
          docker compose -f docker-compose-ci.yml ps
          
          echo "üöÄ Iniciando servi√ßos..."
          docker compose -f docker-compose-ci.yml up -d conta-service kafka-service
          sleep 45
          
          echo "üîç Verificando servi√ßos..."
          docker compose -f docker-compose-ci.yml ps
          
          echo "üè• Testando health checks..."
          
          echo "üîç Testando Conta Service..."
          max_retries=10
          retry_count=0
          while [ $retry_count -lt $max_retries ]; do
            if curl -s -f http://localhost:8081/actuator/health; then
              echo "‚úÖ CONTA SERVICE: HEALTH CHECK PASSOU"
              break
            else
              echo "‚è≥ Conta Service n√£o est√° pronto... tentativa $((retry_count + 1))/$max_retries"
              sleep 10
              retry_count=$((retry_count + 1))
            fi
          done
          
          if [ $retry_count -eq $max_retries ]; then
            echo "‚ùå CONTA SERVICE: HEALTH CHECK FALHOU ap√≥s $max_retries tentativas"
            docker compose -f docker-compose-ci.yml logs conta-service
            exit 1
          fi
          
          echo "üîç Testando Kafka Service..."
          retry_count=0
          while [ $retry_count -lt $max_retries ]; do
            if curl -s -f http://localhost:8082/actuator/health; then
              echo "‚úÖ KAFKA SERVICE: HEALTH CHECK PASSOU"
              break
            else
              echo "‚è≥ Kafka Service n√£o est√° pronto... tentativa $((retry_count + 1))/$max_retries"
              sleep 10
              retry_count=$((retry_count + 1))
            fi
          done
          
          if [ $retry_count -eq $max_retries ]; then
            echo "‚ùå KAFKA SERVICE: HEALTH CHECK FALHOU ap√≥s $max_retries tentativas"
            docker compose -f docker-compose-ci.yml logs kafka-service
            exit 1
          fi
          
          echo "üéâ TODOS OS TESTES PASSARAM!"

      - name: Limpar Ambiente
        if: always()
        run: |
          docker compose -f docker-compose-ci.yml down -v
          echo "üßπ Ambiente limpo"

  security-scan:
    runs-on: ubuntu-latest
    needs: build-and-test
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Security Scan
        uses: dependency-check/Dependency-Check_Action@main
        with:
          project: 'api-funcoes-teste-spring'
          path: '.'
          format: 'HTML'
          args: |
            --failOnCVSS 7
            --scan conta-service/
            --scan kafka-service/

      - name: Upload Report
        uses: actions/upload-artifact@v4
        with:
          name: security-reports
          path: reports/