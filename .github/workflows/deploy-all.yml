name: Deploy All Services

on:
  push:
    branches:
      - main

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      # Checkout do código
      - name: Checkout repository
        uses: actions/checkout@v3

      # Criar rede Docker (se já existir, ignora)
      - name: Criar rede Docker
        run: |
          echo "=============================="
          echo "Criando rede Docker..."
          echo "=============================="
          docker network create github_network || echo "Rede github_network já existe"

      # Iniciar Postgres
      - name: Iniciar Postgres
        run: |
          echo "=============================="
          echo "Iniciando Postgres..."
          echo "=============================="
          docker pull postgres:15
          docker create \
            --name postgres_service \
            --network github_network \
            -e POSTGRES_USER=admin \
            -e POSTGRES_PASSWORD=admin \
            -e POSTGRES_DB=mydb \
            -p 5432:5432 \
            --health-cmd="pg_isready -U admin" \
            --health-interval=10s \
            --health-timeout=5s \
            --health-retries=30 \
            postgres:15
          docker start postgres_service
          # Aguardar saúde do Postgres
          until [ "$(docker inspect --format='{{.State.Health.Status}}' postgres_service)" == "healthy" ]; do
            echo "Aguardando Postgres ficar saudável..."
            sleep 5
          done
          echo "Postgres está saudável!"

      # Iniciar Zookeeper
      - name: Iniciar Zookeeper
        run: |
          echo "=============================="
          echo "Iniciando Zookeeper..."
          echo "=============================="
          docker pull confluentinc/cp-zookeeper:7.4.1
          docker create \
            --name zookeeper_service \
            --network github_network \
            --network-alias zookeeper \
            -p 2181:2181 \
            -e ZOOKEEPER_CLIENT_PORT=2181 \
            -e ZOOKEEPER_TICK_TIME=2000 \
            -e GITHUB_ACTIONS=true \
            -e CI=true \
            --health-cmd="echo ruok | nc localhost 2181 | grep imok" \
            --health-interval=10s \
            --health-timeout=5s \
            --health-retries=60 \
            confluentinc/cp-zookeeper:7.4.1
          docker start zookeeper_service
          # Aguardar saúde do Zookeeper
          until [ "$(docker inspect --format='{{.State.Health.Status}}' zookeeper_service)" == "healthy" ]; do
            echo "Aguardando Zookeeper ficar saudável..."
            sleep 5
          done
          echo "Zookeeper está saudável!"

      # Iniciar Kafka
      - name: Iniciar Kafka
        run: |
          echo "=============================="
          echo "Iniciando Kafka..."
          echo "=============================="
          docker pull confluentinc/cp-kafka:7.4.1
          docker create \
            --name kafka_service \
            --network github_network \
            --network-alias kafka \
            -p 9092:9092 \
            -e KAFKA_BROKER_ID=1 \
            -e KAFKA_ZOOKEEPER_CONNECT=zookeeper:2181 \
            -e KAFKA_LISTENERS=PLAINTEXT://0.0.0.0:9092 \
            -e KAFKA_ADVERTISED_LISTENERS=PLAINTEXT://localhost:9092 \
            -e KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR=1 \
            -e GITHUB_ACTIONS=true \
            -e CI=true \
            --health-cmd="nc -z localhost 9092" \
            --health-interval=10s \
            --health-timeout=5s \
            --health-retries=60 \
            confluentinc/cp-kafka:7.4.1
          docker start kafka_service
          # Aguardar saúde do Kafka
          until [ "$(docker inspect --format='{{.State.Health.Status}}' kafka_service)" == "healthy" ]; do
            echo "Aguardando Kafka ficar saudável..."
            sleep 5
          done
          echo "Kafka está saudável!"

      # Confirmar deploy completo
      - name: Deploy concluído
        run: |
          echo "=============================="
          echo "Todos os serviços estão ativos e saudáveis!"
          echo "=============================="
          docker ps --format "table {{.Names}}\t{{.Status}}\t{{.Ports}}"
