name: CI/CD Microservi√ßos

on:
  push:
    branches: [ main ]

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout do c√≥digo
        uses: actions/checkout@v4

      - name: Configurar JDK 21
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '21'
          cache: 'maven'

      - name: Validar estrutura do projeto
        run: |
          echo "üìÅ Estrutura do projeto:"
          find . -name "pom.xml" -o -name "*.java" | head -20
          echo ""
          echo "üì¶ M√≥dulos encontrados:"
          ls -la

      - name: Build Projeto Completo com Lombok
        run: |
          echo "üèóÔ∏è Building projeto completo com Lombok..."
          mvn clean compile -DskipTests
          echo "‚úÖ Build do projeto completo conclu√≠do"

      - name: Package dos Servi√ßos
        run: |
          echo "üì¶ Empacotando Conta Service..."
          cd conta-service
          mvn clean package -DskipTests
          echo "‚úÖ JARs gerados:"
          ls -la target/*.jar
          echo "‚úÖ Conta Service empacotado"
          
          echo "üì¶ Empacotando Kafka Service..."
          cd ../kafka-service
          mvn clean package -DskipTests
          echo "‚úÖ JARs gerados:"
          ls -la target/*.jar
          echo "‚úÖ Kafka Service empacotado"

  docker-integration:
    runs-on: ubuntu-latest
    needs: build-and-test
    steps:
      - name: Checkout do c√≥digo
        uses: actions/checkout@v4

      - name: Configurar JDK 21
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '21'

      - name: Rebuild dos servi√ßos para garantir
        run: |
          echo "üîß Rebuild dos servi√ßos..."
          cd conta-service && mvn clean package -DskipTests -q
          cd ../kafka-service && mvn clean package -DskipTests -q
          echo "‚úÖ Rebuild conclu√≠do"

      - name: Configurar Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Instalar depend√™ncias do sistema
        run: |
          sudo apt-get update
          sudo apt-get install -y curl netcat-openbsd

      - name: Verificar JARs gerados
        run: |
          echo "üîç Verificando JARs gerados:"
          echo "=== Conta Service ==="
          ls -la conta-service/target/ || echo "‚ùå Diret√≥rio target n√£o encontrado"
          find conta-service/target -name "*.jar" || echo "‚ùå Nenhum JAR encontrado"
          
          echo "=== Kafka Service ==="
          ls -la kafka-service/target/ || echo "‚ùå Diret√≥rio target n√£o encontrado"
          find kafka-service/target -name "*.jar" || echo "‚ùå Nenhum JAR encontrado"

      - name: Build das Imagens Docker
        run: |
          echo "üê≥ Build das imagens Docker..."
          echo "üì¶ Building Conta Service image..."
          docker build -t conta-service:latest -f conta-service/Dockerfile ./conta-service
          echo "üì¶ Building Kafka Service image..."
          docker build -t kafka-service:latest -f kafka-service/Dockerfile ./kafka-service
          echo "‚úÖ Imagens Docker constru√≠das"
          
          echo "üîç Verificando imagens:"
          docker images | grep service

      - name: Criar docker-compose-ci.yml
        run: |
          cat > docker-compose-ci.yml << 'DOCKERCOMPOSE'
          version: '3.8'

          services:
            postgres:
              image: postgres:15-alpine
              container_name: postgres-db
              environment:
                POSTGRES_DB: conta_db
                POSTGRES_USER: postgres
                POSTGRES_PASSWORD: password
                POSTGRES_INITDB_ARGS: "--encoding=UTF8"
              ports:
                - "5432:5432"
              networks:
                - microservices-net
              healthcheck:
                test: ["CMD-SHELL", "pg_isready -U postgres -d conta_db"]
                interval: 5s
                timeout: 5s
                retries: 10
                start_period: 10s

            zookeeper:
              image: confluentinc/cp-zookeeper:7.5.0
              container_name: zookeeper
              environment:
                ZOOKEEPER_CLIENT_PORT: 2181
                ZOOKEEPER_TICK_TIME: 2000
              ports:
                - "2181:2181"
              networks:
                - microservices-net
              healthcheck:
                test: ["CMD-SHELL", "echo ruok | nc localhost 2181 | grep imok"]
                interval: 10s
                timeout: 5s
                retries: 10

            kafka-broker:
              image: confluentinc/cp-kafka:7.5.0
              container_name: kafka-broker
              environment:
                KAFKA_BROKER_ID: 1
                KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
                KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka-broker:9092,PLAINTEXT_HOST://localhost:9092
                KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
                KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
                KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
                KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
                KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
              ports:
                - "9092:9092"
              networks:
                - microservices-net
              depends_on:
                zookeeper:
                  condition: service_healthy
              healthcheck:
                test: ["CMD-SHELL", "kafka-broker-api-versions --bootstrap-server localhost:9092 > /dev/null 2>&1"]
                interval: 10s
                timeout: 10s
                retries: 15
                start_period: 30s

            conta-service:
              image: conta-service:latest
              container_name: conta-service
              ports:
                - "8081:8080"
              environment:
                SPRING_DATASOURCE_URL: jdbc:postgresql://postgres:5432/conta_db
                SPRING_DATASOURCE_USERNAME: postgres
                SPRING_DATASOURCE_PASSWORD: password
                SPRING_KAFKA_BOOTSTRAP_SERVERS: kafka-broker:9092
                SPRING_JPA_HIBERNATE_DDL_AUTO: update
                # Configura√ß√µes de resili√™ncia
                SPRING_DATASOURCE_HIKARI_CONNECTION_TIMEOUT: 60000
                SPRING_DATASOURCE_HIKARI_MAXIMUM_POOL_SIZE: 5
                SPRING_KAFKA_PROPERTIES_RETRY_BACKOFF_MS: 1000
                SPRING_KAFKA_PROPERTIES_MAX_BLOCK_MS: 30000
                # Logging
                LOGGING_LEVEL_COM_FUNCOES: INFO
                LOGGING_LEVEL_ORG_SPRINGFRAMEWORK: WARN
              networks:
                - microservices-net
              depends_on:
                postgres:
                  condition: service_healthy
                kafka-broker:
                  condition: service_healthy
              healthcheck:
                test: ["CMD", "curl", "-f", "http://localhost:8080/actuator/health"]
                interval: 15s
                timeout: 10s
                retries: 15
                start_period: 60s

            kafka-service:
              image: kafka-service:latest
              container_name: kafka-service
              ports:
                - "8082:8080"
              environment:
                SPRING_DATASOURCE_URL: jdbc:postgresql://postgres:5432/conta_db
                SPRING_DATASOURCE_USERNAME: postgres
                SPRING_DATASOURCE_PASSWORD: password
                SPRING_KAFKA_BOOTSTRAP_SERVERS: kafka-broker:9092
                SPRING_KAFKA_CONSUMER_GROUP_ID: kafka-service-group
                SPRING_JPA_HIBERNATE_DDL_AUTO: update
                # Configura√ß√µes de resili√™ncia
                SPRING_DATASOURCE_HIKARI_CONNECTION_TIMEOUT: 60000
                SPRING_DATASOURCE_HIKARI_MAXIMUM_POOL_SIZE: 5
                SPRING_KAFKA_CONSUMER_PROPERTIES_SESSION_TIMEOUT_MS: 30000
                SPRING_KAFKA_CONSUMER_PROPERTIES_HEARTBEAT_INTERVAL_MS: 10000
                # Logging
                LOGGING_LEVEL_COM_FUNCOES: INFO
                LOGGING_LEVEL_ORG_SPRINGFRAMEWORK_KAFKA: WARN
              networks:
                - microservices-net
              depends_on:
                postgres:
                  condition: service_healthy
                kafka-broker:
                  condition: service_healthy
              healthcheck:
                test: ["CMD", "curl", "-f", "http://localhost:8080/actuator/health"]
                interval: 15s
                timeout: 10s
                retries: 15
                start_period: 60s

          networks:
            microservices-net:
              driver: bridge
          DOCKERCOMPOSE

      - name: Executar Docker Compose
        run: |
          echo "üöÄ Iniciando infraestrutura..."
          docker compose -f docker-compose-ci.yml up -d postgres zookeeper
          
          echo "‚è≥ Aguardando Zookeeper..."
          sleep 15
          
          echo "üîç Verificando Zookeeper..."
          until echo "ruok" | nc -w 1 localhost 2181 | grep -q "imok"; do
            echo "‚è≥ Zookeeper n√£o est√° pronto..."
            sleep 5
          done
          echo "‚úÖ Zookeeper pronto!"
          
          docker compose -f docker-compose-ci.yml up -d kafka-broker
          
          echo "‚è≥ Aguardando Kafka Broker..."
          for i in {1..30}; do
            if docker exec kafka-broker kafka-broker-api-versions --bootstrap-server localhost:9092 > /dev/null 2>&1; then
              echo "‚úÖ Kafka Broker pronto!"
              break
            fi
            echo "‚è≥ Kafka Broker n√£o est√° pronto... tentativa $i/30"
            sleep 5
          done

          echo "üîç Verificando sa√∫de da infraestrutura..."
          echo "=== Status dos containers ==="
          docker compose -f docker-compose-ci.yml ps
          
          echo "=== Testando PostgreSQL ==="
          docker exec postgres-db pg_isready -U postgres -d conta_db && echo "‚úÖ PostgreSQL OK"
          
          echo "=== Testando Kafka ==="
          docker exec kafka-broker kafka-topics --bootstrap-server localhost:9092 --list && echo "‚úÖ Kafka OK" || echo "‚ö†Ô∏è  Kafka responde mas sem t√≥picos"

          echo "üöÄ Iniciando servi√ßos de aplica√ß√£o..."
          docker compose -f docker-compose-ci.yml up -d conta-service kafka-service
          
          echo "‚è≥ Aguardando servi√ßos ficarem prontos..."
          sleep 60

          echo "üîç Verificando estado dos servi√ßos..."
          echo "=== Status dos containers ==="
          docker compose -f docker-compose-ci.yml ps
          
          echo "=== Logs Conta Service ==="
          docker compose -f docker-compose-ci.yml logs conta-service --tail=20
          echo "=== Logs Kafka Service ==="
          docker compose -f docker-compose-ci.yml logs kafka-service --tail=20

          echo "üè• Executando health checks..."

          echo "üîç Testando Conta Service..."
          for i in {1..25}; do
            if curl -s -f http://localhost:8081/actuator/health > /dev/null 2>&1; then
              echo "‚úÖ CONTA SERVICE: HEALTH CHECK PASSOU na tentativa $i"
              echo "üìä Status:"
              curl -s http://localhost:8081/actuator/health | grep status || echo "Status n√£o dispon√≠vel"
              break
            else
              echo "‚è≥ Conta Service n√£o est√° pronto... tentativa $i/25"
              sleep 5
            fi
            if [ $i -eq 10 ]; then
              echo "üìã Logs do Conta Service (√∫ltimas 20 linhas):"
              docker compose -f docker-compose-ci.yml logs conta-service --tail=20
            fi
          done

          if [ $i -eq 25 ]; then
            echo "‚ùå CONTA SERVICE: HEALTH CHECK FALHOU ap√≥s 25 tentativas"
            echo "=== Logs completos do Conta Service ==="
            docker compose -f docker-compose-ci.yml logs conta-service
            exit 1
          fi

          echo "üîç Testando Kafka Service..."
          for i in {1..25}; do
            if curl -s -f http://localhost:8082/actuator/health > /dev/null 2>&1; then
              echo "‚úÖ KAFKA SERVICE: HEALTH CHECK PASSOU na tentativa $i"
              echo "üìä Status:"
              curl -s http://localhost:8082/actuator/health | grep status || echo "Status n√£o dispon√≠vel"
              break
            else
              echo "‚è≥ Kafka Service n√£o est√° pronto... tentativa $i/25"
              sleep 5
            fi
            if [ $i -eq 10 ]; then
              echo "üìã Logs do Kafka Service (√∫ltimas 20 linhas):"
              docker compose -f docker-compose-ci.yml logs kafka-service --tail=20
            fi
          done

          if [ $i -eq 25 ]; then
            echo "‚ùå KAFKA SERVICE: HEALTH CHECK FALHOU ap√≥s 25 tentativas"
            echo "=== Logs completos do Kafka Service ==="
            docker compose -f docker-compose-ci.yml logs kafka-service
            exit 1
          fi

          echo "üéâ TODOS OS TESTES DE INTEGRA√á√ÉO PASSARAM!"

      - name: Limpar Ambiente
        if: always()
        run: |
          docker compose -f docker-compose-ci.yml down -v --remove-orphans
          docker system prune -f
          echo "üßπ Ambiente limpo"

  security-scan:
    runs-on: ubuntu-latest
    needs: build-and-test
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Security Scan
        uses: dependency-check/Dependency-Check_Action@main
        with:
          project: 'api-funcoes-teste-spring'
          path: '.'
          format: 'HTML'
          args: |
            --failOnCVSS 7
            --scan conta-service/
            --scan kafka-service/

      - name: Upload Report
        uses: actions/upload-artifact@v4
        with:
          name: security-reports
          path: reports/