name: CI/CD Microserviços

on:
  push:
    branches: [ main ]

env:
  JAVA_VERSION: '21'
  DOCKER_BUILDKIT: 1
  COMPOSE_DOCKER_CLI_BUILD: 1

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        service: [conta-service, kafka-service]

    steps:
      - name: "[1] Checkout do código"
        uses: actions/checkout@v4

      - name: "[2] Configurar JDK ${{ env.JAVA_VERSION }}"
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: ${{ env.JAVA_VERSION }}
          cache: 'maven'

      - name: "[3] Build Projeto Raiz"
        run: |
          echo "🏗️  Building projeto raiz..."
          mvn clean install -DskipTests -q
          echo "✅ Build projeto raiz concluído"

      - name: "[4] Build e Testes ${{ matrix.service }}"
        run: |
          echo "🔧 Building ${{ matrix.service }}..."
          cd ${{ matrix.service }}
          mvn clean compile test -q
          echo "✅ ${{ matrix.service }} build e testes concluídos"

  docker-integration:
    runs-on: ubuntu-latest
    needs: build-and-test
    timeout-minutes: 20

    steps:
      - name: "[1] Checkout do código"
        uses: actions/checkout@v4

      - name: "[2] Configurar Docker Buildx"
        uses: docker/setup-buildx-action@v3

      - name: "[3] Build das Imagens Docker"
        run: |
          echo "🐳 Build das imagens Docker..."
          
          echo "🔨 Build Conta Service..."
          docker build \
            --build-arg BUILDKIT_INLINE_CACHE=1 \
            -t conta-service:latest \
            -f conta-service/Dockerfile \
            .
          
          echo "🔨 Build Kafka Service..."
          docker build \
            --build-arg BUILDKIT_INLINE_CACHE=1 \
            -t kafka-service:latest \
            -f kafka-service/Dockerfile \
            .
          
          echo "✅ Build das imagens concluído"

      - name: "[4] Iniciar Infraestrutura"
        run: |
          echo "🚀 Iniciando infraestrutura..."
          cd infra
          
          # Parar qualquer container existente
          docker compose down -v --remove-orphans
          
          # Build e startup
          docker compose build --no-cache
          docker compose up -d
          
          echo "⏳ Aguardando inicialização da infraestrutura..."
          sleep 45

      - name: "[5] Verificar Infraestrutura"
        run: |
          echo "🔍 Verificando infraestrutura..."
          cd infra
          
          echo "📊 Status dos containers:"
          docker compose ps
          
          echo "🔧 Logs da infraestrutura:"
          docker compose logs --tail=20

      - name: "[6] Aguardar Serviços Spring Boot"
        run: |
          echo "⏳ Aguardando serviços Spring Boot..."
          cd infra
          
          # Aguardar até 2 minutos para serviços iniciarem
          timeout 120s bash -c '
            until docker compose logs conta-service | grep -q "Started"; do
              echo "🔄 Aguardando Conta Service..."
              sleep 10
            done
            echo "✅ Conta Service iniciado"
          ' || echo "⚠️  Timeout aguardando Conta Service"
          
          timeout 120s bash -c '
            until docker compose logs kafka-service | grep -q "Started"; do
              echo "🔄 Aguardando Kafka Service..."
              sleep 10
            done
            echo "✅ Kafka Service iniciado"
          ' || echo "⚠️  Timeout aguardando Kafka Service"

      - name: "[7] Testar Health Checks"
        run: |
          echo "🏥 Testando health checks..."
          cd infra
          
          # Testar com retry e timeout
          echo "🔍 Testando Conta Service..."
          for i in {1..10}; do
            if curl -s -f http://localhost:8081/actuator/health > /dev/null 2>&1; then
              echo "✅ Conta Service HEALTHY"
              break
            else
              echo "⏳ Tentativa $i/10: Conta Service não responde..."
              sleep 10
            fi
          done
          
          echo "🔍 Testando Kafka Service..."
          for i in {1..10}; do
            if curl -s -f http://localhost:8082/actuator/health > /dev/null 2>&1; then
              echo "✅ Kafka Service HEALTHY"
              break
            else
              echo "⏳ Tentativa $i/10: Kafka Service não responde..."
              sleep 10
            fi
          done
          
          # Teste final obrigatório
          echo "🎯 Teste final de health checks..."
          if curl -f http://localhost:8081/actuator/health; then
            echo "✅✅ CONTA SERVICE: HEALTH CHECK PASSOU"
          else
            echo "❌❌ CONTA SERVICE: HEALTH CHECK FALHOU"
            exit 1
          fi
          
          if curl -f http://localhost:8082/actuator/health; then
            echo "✅✅ KAFKA SERVICE: HEALTH CHECK PASSOU"
          else
            echo "❌❌ KAFKA SERVICE: HEALTH CHECK FALHOU"
            exit 1
          fi

      - name: "[8] Coletar Logs em Caso de Falha"
        if: failure()
        run: |
          echo "📝 Coletando logs para análise..."
          cd infra
          
          docker compose logs > all-logs.txt
          docker compose logs conta-service > conta-logs.txt
          docker compose logs kafka-service > kafka-logs.txt
          
          echo "=== CONTA SERVICE LOGS ==="
          tail -100 conta-logs.txt
          echo "=== KAFKA SERVICE LOGS ==="
          tail -100 kafka-logs.txt

      - name: "[9] Limpar Ambiente"
        if: always()
        run: |
          cd infra
          docker compose down -v --remove-orphans
          echo "🧹 Ambiente limpo"

  security-scan:
    runs-on: ubuntu-latest
    needs: build-and-test

    steps:
      - name: "[1] Checkout"
        uses: actions/checkout@v4

      - name: "[2] Security Scan"
        uses: dependency-check/Dependency-Check_Action@main
        with:
          project: 'api-funcoes-teste-spring'
          path: '.'
          format: 'HTML'
          args: >
            --failOnCVSS 7
            --scan conta-service/
            --scan kafka-service/

      - name: "[3] Upload Report"
        uses: actions/upload-artifact@v4
        with:
          name: security-reports
          path: reports/