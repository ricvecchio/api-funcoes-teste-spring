name: CI/CD Microservi√ßos

on:
  push:
    branches: [ main ]

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout do c√≥digo
        uses: actions/checkout@v4

      - name: Configurar JDK 21
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '21'
          cache: 'maven'

      - name: Validar estrutura do projeto
        run: |
          echo "üìÅ Estrutura do projeto:"
          find . -name "pom.xml" -o -name "*.java" | head -20
          echo ""
          echo "üì¶ M√≥dulos encontrados:"
          ls -la

      - name: Build Projeto Completo com Lombok
        run: |
          echo "üèóÔ∏è Building projeto completo com Lombok..."
          mvn clean compile -DskipTests
          echo "‚úÖ Build do projeto completo conclu√≠do"

      - name: Package dos Servi√ßos
        run: |
          echo "üì¶ Empacotando Conta Service..."
          cd conta-service
          mvn clean package -DskipTests
          echo "‚úÖ JARs gerados:"
          ls -la target/*.jar
          echo "‚úÖ Conta Service empacotado"
          
          echo "üì¶ Empacotando Kafka Service..."
          cd ../kafka-service
          mvn clean package -DskipTests
          echo "‚úÖ JARs gerados:"
          ls -la target/*.jar
          echo "‚úÖ Kafka Service empacotado"

  docker-integration:
    runs-on: ubuntu-latest
    needs: build-and-test
    timeout-minutes: 30
    steps:
      - name: Checkout do c√≥digo
        uses: actions/checkout@v4

      - name: Configurar JDK 21
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '21'

      - name: Rebuild dos servi√ßos para garantir
        run: |
          echo "üîß Rebuild dos servi√ßos..."
          cd conta-service && mvn clean package -DskipTests -q
          cd ../kafka-service && mvn clean package -DskipTests -q
          echo "‚úÖ Rebuild conclu√≠do"

      - name: Configurar Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Instalar depend√™ncias do sistema
        run: |
          sudo apt-get update
          sudo apt-get install -y curl netcat-openbsd jq

      - name: Build das Imagens Docker
        run: |
          echo "üê≥ Build das imagens Docker..."
          docker build -t conta-service:latest -f conta-service/Dockerfile ./conta-service
          docker build -t kafka-service:latest -f kafka-service/Dockerfile ./kafka-service
          echo "‚úÖ Imagens Docker constru√≠das"
          docker images | grep service || true

      - name: Criar docker-compose-ci.yml
        run: |
          cat > docker-compose-ci.yml << 'DOCKERCOMPOSE'
          services:
            postgres:
              image: postgres:15-alpine
              container_name: postgres-db
              environment:
                POSTGRES_DB: conta_db
                POSTGRES_USER: postgres
                POSTGRES_PASSWORD: password
              ports:
                - "5432:5432"
              networks:
                - microservices-net
              healthcheck:
                test: ["CMD-SHELL", "pg_isready -U postgres -d conta_db"]
                interval: 5s
                timeout: 5s
                retries: 5
                start_period: 10s

            zookeeper:
              image: bitnami/zookeeper:3.9-debian-12
              container_name: zookeeper
              environment:
                ALLOW_ANONYMOUS_LOGIN: "yes"
              ports:
                - "2181:2181"
              networks:
                - microservices-net
              healthcheck:
                test: ["CMD-SHELL", "echo ruok | nc -w 1 127.0.0.1 2181 | grep imok || exit 1"]
                interval: 5s
                timeout: 3s
                retries: 5
                start_period: 5s

            kafka-broker:
              image: bitnami/kafka:3.7-debian-12
              container_name: kafka-broker
              environment:
                KAFKA_BROKER_ID: 1
                KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
                KAFKA_LISTENERS: PLAINTEXT://:9092
                KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka-broker:9092
                ALLOW_PLAINTEXT_LISTENER: "yes"
              ports:
                - "9092:9092"
              networks:
                - microservices-net
              depends_on:
                - zookeeper
              healthcheck:
                test: ["CMD-SHELL", "kafka-broker-api-versions --bootstrap-server localhost:9092 >/dev/null 2>&1 || exit 1"]
                interval: 8s
                timeout: 5s
                retries: 6
                start_period: 20s
          networks:
            microservices-net:
              driver: bridge
          DOCKERCOMPOSE

      - name: Executar Docker Compose (start e waits com timeout curto)
        run: |
          set -euo pipefail
          echo "üöÄ Iniciando infra CI: postgres + zookeeper..."
          docker compose -f docker-compose-ci.yml up -d postgres zookeeper

          echo "‚è≥ Aguardando Zookeeper (at√© 120s)..."
          max_attempts=24
          attempt=1
          until docker exec zookeeper bash -c "echo ruok | nc -w 1 127.0.0.1 2181 | grep imok" >/dev/null 2>&1; do
            if [ $attempt -ge $max_attempts ]; then
              echo "‚ùå Zookeeper n√£o ficou pronto ap√≥s $((max_attempts*5))s"
              docker compose -f docker-compose-ci.yml logs zookeeper --tail=200
              docker compose -f docker-compose-ci.yml down -v --remove-orphans
              exit 1
            fi
            echo "‚è≥ Zookeeper n√£o est√° pronto... tentativa $attempt/$max_attempts"
            attempt=$((attempt+1))
            sleep 5
          done
          echo "‚úÖ Zookeeper pronto!"

          echo "üöÄ Subindo Kafka broker..."
          docker compose -f docker-compose-ci.yml up -d kafka-broker

          echo "‚è≥ Aguardando Kafka Broker (at√© 90s)..."
          max_attempts=18
          attempt=1
          until docker exec kafka-broker bash -c "kafka-broker-api-versions --bootstrap-server localhost:9092 >/dev/null 2>&1"; do
            if [ $attempt -ge $max_attempts ]; then
              echo "‚ùå Kafka Broker n√£o pronto ap√≥s $((max_attempts*5))s"
              docker compose -f docker-compose-ci.yml logs kafka-broker --tail=200
              docker compose -f docker-compose-ci.yml down -v --remove-orphans
              exit 1
            fi
            echo "‚è≥ Kafka Broker n√£o est√° pronto... tentativa $attempt/$max_attempts"
            attempt=$((attempt+1))
            sleep 5
          done
          echo "‚úÖ Kafka Broker pronto!"

          echo "üöÄ Subindo servi√ßos de aplica√ß√£o..."
          docker compose -f docker-compose-ci.yml up -d conta-service kafka-service

          echo "‚è≥ Healthchecks dos servi√ßos (at√© 2 min)..."
          for svc in conta-service kafka-service; do
            max_try=24
            try=1
            port=8081
            if [ "$svc" = "kafka-service" ]; then port=8082; fi
            while ! curl -s -f "http://localhost:${port}/actuator/health" >/dev/null 2>&1; do
              if [ $try -ge $max_try ]; then
                echo "‚ùå $svc healthcheck failed"
                docker compose -f docker-compose-ci.yml logs $svc --tail=200
                docker compose -f docker-compose-ci.yml down -v --remove-orphans
                exit 1
              fi
              echo "‚è≥ $svc n√£o est√° pronto... tentativa $try/$max_try"
              try=$((try+1))
              sleep 5
            done
            echo "‚úÖ $svc ok"
          done

          echo "üéâ Integra√ß√£o OK - limpando ambientes..."
          docker compose -f docker-compose-ci.yml down -v --remove-orphans

      - name: Limpar Ambiente (caso n√£o tenha sido limpo)
        if: always()
        run: |
          docker compose -f docker-compose-ci.yml down -v --remove-orphans || true
          docker system prune -f || true
          echo "üßπ Ambiente limpo"

  security-scan:
    runs-on: ubuntu-latest
    needs: build-and-test
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Security Scan
        uses: dependency-check/Dependency-Check_Action@main
        with:
          project: 'api-funcoes-teste-spring'
          path: '.'
          format: 'HTML'
          args: |
            --failOnCVSS 7
            --scan conta-service/
            --scan kafka-service/

      - name: Upload Report
        uses: actions/upload-artifact@v4
        with:
          name: security-reports
          path: reports/