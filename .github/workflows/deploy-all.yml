name: CI/CD - Microservices Infra üöÄ

on:
  push:
    branches: [ main ]
  pull_request:

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    env:
      CONTA_SERVICE_PATH: ./conta-service
      KAFKA_SERVICE_PATH: ./kafka-service
      INFRA_PATH: ./infra
      DOCKER_BUILDKIT: 1
      COMPOSE_DOCKER_CLI_BUILD: 1
      IMAGE_CACHE_DIR: /tmp/.buildx-cache

    steps:
      # ======================================
      # üì• Checkout do reposit√≥rio
      # ======================================
      - name: üì• Checkout do reposit√≥rio
        uses: actions/checkout@v4

      # ======================================
      # ‚òï Configurar JDK 21
      # ======================================
      - name: ‚òï Configurar JDK 21
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: 21
          cache: maven

      # ======================================
      # üíæ Restaurar cache de imagens Docker
      # ======================================
      - name: üíæ Restaurar cache de imagens Docker
        id: docker-cache
        uses: actions/cache@v4
        with:
          path: ${{ env.IMAGE_CACHE_DIR }}
          key: ${{ runner.os }}-docker-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-docker-

      # ======================================
      # üèóÔ∏è Build dos microservi√ßos
      # ======================================
      - name: üèóÔ∏è  Buildando conta-service
        working-directory: ${{ env.CONTA_SERVICE_PATH }}
        run: |
          echo "üèóÔ∏è  Buildando conta-service..."
          mvn clean package -DskipTests
          echo "‚úÖ Build conclu√≠do para conta-service"

      - name: üèóÔ∏è  Buildando kafka-service
        working-directory: ${{ env.KAFKA_SERVICE_PATH }}
        run: |
          echo "üèóÔ∏è  Buildando kafka-service..."
          mvn clean package -DskipTests
          echo "‚úÖ Build conclu√≠do para kafka-service"

      # ======================================
      # üß© Configurar Docker Buildx
      # ======================================
      - name: üß© Configurar Docker Buildx
        uses: docker/setup-buildx-action@v3

      # ======================================
      # üê≥ Build das imagens Docker com cache
      # ======================================
      - name: üê≥ Build das imagens Docker
        working-directory: ${{ env.INFRA_PATH }}
        run: |
          echo "üê≥ Buildando imagens Docker com cache..."
          docker compose --env-file .env build \
            --build-arg BUILDKIT_INLINE_CACHE=1
          echo "‚úÖ Build de imagens Docker conclu√≠do"

      # ======================================
      # üöÄ Subir depend√™ncias (Postgres, Zookeeper, Kafka Broker)
      # ======================================
      - name: üöÄ Subir ambiente Docker Compose (depend√™ncias)
        working-directory: ${{ env.INFRA_PATH }}
        run: |
          docker compose --env-file .env up -d postgres-db zookeeper kafka-broker

      # ======================================
      # üïì Aguardar servi√ßos essenciais ficarem saud√°veis
      # ======================================
      - name: üïì Aguardar servi√ßos essenciais
        run: |
          echo "‚è≥ Aguardando servi√ßos dependentes (Postgres, Zookeeper, Kafka Broker)..."
          services=("postgres-db" "zookeeper" "kafka-broker")
          max_attempts=40
          sleep_interval=10

          for service in "${services[@]}"; do
            (
              attempt=1
              while [ $attempt -le $max_attempts ]; do
                status=$(docker inspect -f '{{.State.Health.Status}}' $service 2>/dev/null || echo "unknown")
                echo "‚è± [$service] Tentativa $attempt/$max_attempts -> Status: $status"
                if [ "$status" == "healthy" ]; then
                  echo "‚úÖ $service saud√°vel!"
                  exit 0
                fi
                sleep $sleep_interval
                attempt=$((attempt + 1))
              done
              echo "‚ùå $service n√£o ficou saud√°vel ap√≥s $max_attempts tentativas."
              exit 1
            ) &
          done

          wait
          echo "‚úÖ Todos os servi√ßos dependentes est√£o saud√°veis!"

      # ======================================
      # üöÄ Subir microservices
      # ======================================
      - name: üöÄ Subir microservices
        working-directory: ${{ env.INFRA_PATH }}
        run: |
          docker compose --env-file .env up -d conta-service kafka-service

      # ======================================
      # üïì Aguardar microservices ficarem saud√°veis (com logs detalhados)
      # ======================================
      - name: üïì Aguardar microservices
        run: |
          echo "‚è≥ Aguardando microservices (Conta Service e Kafka Service) com logs detalhados..."
          services=("conta-service" "kafka-service")
          max_attempts=50
          sleep_interval=15

          for service in "${services[@]}"; do
            (
              echo "üîπ Iniciando monitoramento de $service..."
              attempt=1
              while [ $attempt -le $max_attempts ]; do
                status=$(docker inspect -f '{{.State.Health.Status}}' $service 2>/dev/null || echo "unknown")
                echo "‚è± [$service] Tentativa $attempt/$max_attempts -> Status: $status"
          
                if [ "$status" == "unhealthy" ] && [ $attempt -gt 3 ]; then
                  echo "üîç [$service] Logs (√∫ltimas 30 linhas):"
                  docker logs $service --tail 30 2>/dev/null || echo "‚ö†Ô∏è N√£o foi poss√≠vel obter logs"
                fi
          
                if [ "$status" == "healthy" ]; then
                  echo "‚úÖ $service saud√°vel!"
                  exit 0
                fi
          
                sleep $sleep_interval
                attempt=$((attempt + 1))
              done

              echo "‚ùå $service n√£o ficou saud√°vel ap√≥s $max_attempts tentativas."
              echo "üîç Logs finais de $service:"
              docker logs $service 2>/dev/null || echo "‚ö†Ô∏è N√£o foi poss√≠vel obter logs"
              exit 1
            ) &
          done

          wait
          echo "‚úÖ Todos os microservices est√£o saud√°veis!"
          docker compose ps

      # ======================================
      # üîç Testar endpoints
      # ======================================
      - name: üîç Testar endpoints
        env:
          CONTA_SERVICE_PORT: 8081
          KAFKA_SERVICE_PORT: 8082
        run: |
          echo "üß™ Testando health checks dos servi√ßos..."
          curl -f --retry 5 --retry-delay 10 --retry-max-time 60 http://localhost:${CONTA_SERVICE_PORT}/actuator/health
          curl -f --retry 5 --retry-delay 10 --retry-max-time 60 http://localhost:${KAFKA_SERVICE_PORT}/actuator/health
          echo "‚úÖ Todos os health checks passaram!"

      # ======================================
      # üß™ Executar testes Maven
      # ======================================
      - name: üß™ Executar testes Maven
        run: |
          cd ${{ env.CONTA_SERVICE_PATH }} && mvn test -q
          cd ../${{ env.KAFKA_SERVICE_PATH }} && mvn test -q

      # ======================================
      # üìÑ Logs em caso de falha
      # ======================================
      - name: üìÑ Logs em caso de falha
        if: failure()
        run: |
          echo "üîç Logs detalhados dos servi√ßos:"
          docker ps -a
          echo "=== conta-service logs ==="
          docker logs conta-service || true
          echo "=== kafka-service logs ==="
          docker logs kafka-service || true
          echo "=== postgres-db logs ==="
          docker logs postgres-db || true
          echo "=== kafka-broker logs ==="
          docker logs kafka-broker || true
          echo "=== zookeeper logs ==="
          docker logs zookeeper || true

      # ======================================
      # üßπ Limpeza final
      # ======================================
      - name: üßπ Limpeza final
        if: always()
        working-directory: ${{ env.INFRA_PATH }}
        run: |
          docker compose down -v --remove-orphans
          docker system prune -af
