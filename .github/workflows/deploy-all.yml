name: CI/CD Microservi√ßos

on:
  push:
    branches: [ main ]

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout do c√≥digo
        uses: actions/checkout@v4

      - name: Configurar JDK 21
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '21'
          cache: 'maven'

      - name: Validar estrutura do projeto
        run: |
          echo "üìÅ Estrutura do projeto:"
          find . -name "pom.xml" -o -name "*.java" | head -20
          echo ""
          echo "üì¶ M√≥dulos encontrados:"
          ls -la

      - name: Build Projeto Completo
        run: |
          echo "üèóÔ∏è Build completo..."
          mvn clean compile -DskipTests
          echo "‚úÖ Build completo"

      - name: Package dos Servi√ßos
        run: |
          echo "üì¶ Empacotando Conta Service..."
          cd conta-service
          mvn clean package -DskipTests
          echo "‚úÖ Conta Service empacotado"
          
          echo "üì¶ Empacotando Kafka Service..."
          cd ../kafka-service
          mvn clean package -DskipTests
          echo "‚úÖ Kafka Service empacotado"

  docker-integration:
    runs-on: ubuntu-latest
    needs: build-and-test
    steps:
      - name: Checkout do c√≥digo
        uses: actions/checkout@v4

      - name: Configurar JDK 21
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '21'

      - name: Rebuild dos servi√ßos
        run: |
          cd conta-service && mvn clean package -DskipTests -q
          cd ../kafka-service && mvn clean package -DskipTests -q

      - name: Configurar Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Instalar depend√™ncias
        run: sudo apt-get update && sudo apt-get install -y curl netcat-openbsd

      - name: Build das imagens Docker
        run: |
          docker build -t conta-service:latest -f conta-service/Dockerfile ./conta-service
          docker build -t kafka-service:latest -f kafka-service/Dockerfile ./kafka-service

      - name: Criar docker-compose-ci.yml
        run: |
          cat > docker-compose-ci.yml << 'DOCKERCOMPOSE'
          version: '3.9'
          services:
            postgres:
              image: postgres:15-alpine
              environment:
                POSTGRES_DB: conta_db
                POSTGRES_USER: postgres
                POSTGRES_PASSWORD: password
              healthcheck:
                test: ["CMD-SHELL", "pg_isready -U postgres -d conta_db"]
                interval: 5s
                retries: 5
              ports:
                - "5432:5432"
              networks:
                - microservices-net

            zookeeper:
              image: confluentinc/cp-zookeeper:7.5.0
              environment:
                ZOOKEEPER_CLIENT_PORT: 2181
                ZOOKEEPER_TICK_TIME: 2000
              healthcheck:
                test: ["CMD-SHELL", "echo ruok | nc -w 2 localhost 2181 | grep imok"]
                interval: 5s
                retries: 5
              ports:
                - "2181:2181"
              networks:
                - microservices-net

            kafka-broker:
              image: confluentinc/cp-kafka:7.5.0
              environment:
                KAFKA_BROKER_ID: 1
                KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
                KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka-broker:9092
                KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
              depends_on:
                zookeeper:
                  condition: service_healthy
              healthcheck:
                test: ["CMD-SHELL", "kafka-broker-api-versions --bootstrap-server kafka-broker:9092 > /dev/null 2>&1"]
                interval: 10s
                retries: 5
              ports:
                - "9092:9092"
              networks:
                - microservices-net

            conta-service:
              image: conta-service:latest
              environment:
                SPRING_DATASOURCE_URL: jdbc:postgresql://postgres:5432/conta_db
                SPRING_DATASOURCE_USERNAME: postgres
                SPRING_DATASOURCE_PASSWORD: password
                SPRING_KAFKA_BOOTSTRAP_SERVERS: kafka-broker:9092
              depends_on:
                postgres:
                  condition: service_healthy
                kafka-broker:
                  condition: service_healthy
              healthcheck:
                test: ["CMD", "curl", "-f", "http://localhost:8080/actuator/health"]
                interval: 10s
                retries: 5
              ports:
                - "8081:8080"
              networks:
                - microservices-net

            kafka-service:
              image: kafka-service:latest
              environment:
                SPRING_DATASOURCE_URL: jdbc:postgresql://postgres:5432/conta_db
                SPRING_DATASOURCE_USERNAME: postgres
                SPRING_DATASOURCE_PASSWORD: password
                SPRING_KAFKA_BOOTSTRAP_SERVERS: kafka-broker:9092
              depends_on:
                postgres:
                  condition: service_healthy
                kafka-broker:
                  condition: service_healthy
              healthcheck:
                test: ["CMD", "curl", "-f", "http://localhost:8080/actuator/health"]
                interval: 10s
                retries: 5
              ports:
                - "8082:8080"
              networks:
                - microservices-net

          networks:
            microservices-net:
              driver: bridge
          DOCKERCOMPOSE

      - name: Executar Docker Compose e Healthcheck
        run: |
          docker compose -f docker-compose-ci.yml up -d
          echo "‚è≥ Aguardando containers ficarem saud√°veis..."
          docker compose -f docker-compose-ci.yml wait

      - name: Testar servi√ßos via Health Endpoint
        run: |
          for svc in conta-service kafka-service; do
            curl -f http://localhost:$(docker compose -f docker-compose-ci.yml port $svc 8080 | cut -d':' -f2)/actuator/health
          done

      - name: Limpar Ambiente
        if: always()
        run: |
          docker compose -f docker-compose-ci.yml down -v --remove-orphans
          docker system prune -f
