name: CI/CD Microserviços

on:
  push:
    branches: [ main ]

env:
  # Variáveis de ambiente para configuração
  JAVA_VERSION: '21'
  MAVEN_OPTS: '--add-opens java.base/java.lang=ALL-UNNAMED'

jobs:
  # Job de Build e Testes dos Microserviços
  build-and-test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        service: [conta-service, kafka-service]

    steps:
      - name: "[1] Checkout do código"
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: "[2] Configurar JDK ${{ env.JAVA_VERSION }}"
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: ${{ env.JAVA_VERSION }}
          cache: 'maven'

      - name: "[3] Build e Testes do ${{ matrix.service }}"
        run: |
          echo "🏗️  Building ${{ matrix.service }}..."
          cd ${{ matrix.service }}
          mvn clean compile test -DskipTests=false
          echo "✅ ${{ matrix.service }} build e testes concluídos"

  # Job de Integração Docker - CORREÇÃO APLICADA AQUI
  docker-integration:
    runs-on: ubuntu-latest
    needs: build-and-test
    timeout-minutes: 15

    steps:
      - name: "[1] Checkout do código"
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: "[2] Configurar JDK ${{ env.JAVA_VERSION }}"
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: ${{ env.JAVA_VERSION }}
          cache: 'maven'

      - name: "[3] Build do Projeto Raiz para Dependências"
        run: |
          echo "📦 Instalando dependências do projeto raiz..."
          mvn clean install -DskipTests -Dcheckstyle.skip=true -Dspotbugs.skip=true
          echo "✅ Dependências instaladas"

      - name: "[4] Setup Docker Buildx"
        uses: docker/setup-buildx-action@v3
        with:
          driver-opts: |
            image=moby/buildkit:buildx-stable-1

      - name: "[5] Build das Imagens Docker Individualmente"
        run: |
          echo "🐳 Build das imagens Docker..."
          
          echo "🔨 Build da imagem Conta Service..."
          docker build \
            --progress=plain \
            --no-cache \
            -t conta-service:latest \
            -f conta-service/Dockerfile \
            .
          
          echo "🔨 Build da imagem Kafka Service..."
          docker build \
            --progress=plain \
            --no-cache \
            -t kafka-service:latest \
            -f kafka-service/Dockerfile \
            .
          
          echo "✅ Build das imagens concluído"

      - name: "[6] Verificar Imagens Construídas"
        run: |
          echo "📊 Imagens Docker disponíveis:"
          docker images
          
          echo "🔍 Detalhes das imagens:"
          docker image inspect conta-service:latest --format '{{ .RepoTags }}: {{ .Size }}'
          docker image inspect kafka-service:latest --format '{{ .RepoTags }}: {{ .Size }}'

      - name: "[7] Iniciar Infraestrutura com Docker Compose"
        run: |
          echo "🚀 Iniciando infraestrutura com Docker Compose..."
          cd infra
          
          # Build dos serviços com Docker Compose (usando cache das imagens)
          docker compose build --no-cache --progress=plain
          
          # Subir serviços em background
          docker compose up -d
          
          echo "⏳ Aguardando inicialização dos serviços..."
          sleep 30

      - name: "[8] Verificar Status dos Serviços"
        run: |
          echo "📊 Status dos containers:"
          cd infra
          docker compose ps
          
          echo "🔍 Logs dos serviços Spring Boot:"
          docker compose logs conta-service --tail=50
          docker compose logs kafka-service --tail=50
          
          echo "🔧 Logs da infraestrutura:"
          docker compose logs postgres --tail=20
          docker compose logs kafka-broker --tail=20
          docker compose logs zookeeper --tail=20

      - name: "[9] Testar Health Checks dos Serviços"
        run: |
          echo "🏥 Testando health checks..."
          cd infra
          
          # Aguardar mais tempo para serviços Spring Boot inicializarem
          echo "⏳ Aguardando inicialização completa..."
          sleep 30
          
          # Testar Conta Service com retry
          echo "🔍 Testando Conta Service..."
          for i in {1..5}; do
            if curl -s -f http://localhost:8081/actuator/health > /dev/null 2>&1; then
              echo "✅ Conta Service está saudável"
              break
            else
              echo "⏳ Tentativa $i: Conta Service ainda não está pronto..."
              sleep 10
            fi
          done
          
          # Testar Kafka Service com retry
          echo "🔍 Testando Kafka Service..."
          for i in {1..5}; do
            if curl -s -f http://localhost:8082/actuator/health > /dev/null 2>&1; then
              echo "✅ Kafka Service está saudável"
              break
            else
              echo "⏳ Tentativa $i: Kafka Service ainda não está pronto..."
              sleep 10
            fi
          done
          
          # Teste final
          echo "🎯 Teste final de conectividade..."
          curl -f http://localhost:8081/actuator/health && echo "✅ Conta Service: OK" || echo "❌ Conta Service: FALHOU"
          curl -f http://localhost:8082/actuator/health && echo "✅ Kafka Service: OK" || echo "❌ Kafka Service: FALHOU"

      - name: "[10] Coletar Logs em Caso de Falha"
        if: failure()
        run: |
          echo "📝 Coletando logs para debugging..."
          cd infra
          docker compose logs --tail=100 > docker-compose-logs.txt
          echo "📄 Logs salvos em docker-compose-logs.txt"
          
          # Logs detalhados de cada serviço
          docker compose logs conta-service > conta-service-logs.txt
          docker compose logs kafka-service > kafka-service-logs.txt
          
          # Exibir últimos logs
          echo "=== Últimos logs do Conta Service ==="
          tail -50 conta-service-logs.txt
          echo "=== Últimos logs do Kafka Service ==="
          tail -50 kafka-service-logs.txt

      - name: "[11] Limpar Ambiente"
        if: always()
        run: |
          echo "🧹 Limpando ambiente..."
          cd infra
          docker compose down -v --remove-orphans
          echo "✅ Ambiente limpo"

  # Job de Security Scan
  security-scan:
    runs-on: ubuntu-latest
    needs: build-and-test

    steps:
      - name: "[1] Checkout do código"
        uses: actions/checkout@v4

      - name: "[2] Security Scan com OWASP Dependency Check"
        uses: dependency-check/Dependency-Check_Action@main
        with:
          project: 'api-funcoes-teste-spring'
          path: '.'
          format: 'HTML'
          args: >
            --failOnCVSS 7
            --scan conta-service/
            --scan kafka-service/
            --enableRetired

      - name: "[3] Upload Security Report"
        uses: actions/upload-artifact@v4
        with:
          name: security-reports
          path: |
            dependency-check-report.html
            dependency-check-report.xml