# ======================================
# ? Configuração principal - Conta Service
# ======================================

spring.application.name=conta-service

# Porta interna padrão (mantida fixa para consistência no container)
server.port=8080
server.servlet.context-path=/

# ======================================
# ?? Banco de Dados (configurado via variáveis no Docker Compose)
# ======================================
spring.datasource.url=${SPRING_DATASOURCE_URL:jdbc:postgresql://localhost:5432/conta_db}
spring.datasource.username=${SPRING_DATASOURCE_USERNAME:postgres}
spring.datasource.password=${SPRING_DATASOURCE_PASSWORD:password}
spring.jpa.hibernate.ddl-auto=update
spring.jpa.show-sql=false
spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.PostgreSQLDialect

# ======================================
# ? Kafka
# ======================================
spring.kafka.bootstrap-servers=${KAFKA_BOOTSTRAP_SERVERS:localhost:9092}
spring.kafka.consumer.group-id=conta-service-group
spring.kafka.consumer.auto-offset-reset=earliest
spring.kafka.consumer.key-deserializer=org.apache.kafka.common.serialization.StringDeserializer
spring.kafka.consumer.value-deserializer=org.springframework.kafka.support.serializer.JsonDeserializer
spring.kafka.consumer.properties.spring.json.trusted.packages=*
spring.kafka.listener.missing-topics-fatal=false

# ======================================
# ? Configurações de Resiliência para Kafka
# ======================================
# Tentativas de conexão com Kafka
spring.kafka.properties.retries=10
spring.kafka.properties.retry.backoff.ms=5000
spring.kafka.properties.reconnect.backoff.max.ms=10000
spring.kafka.properties.reconnect.backoff.ms=1000
spring.kafka.properties.socket.connection.setup.timeout.ms=30000
spring.kafka.properties.request.timeout.ms=30000

# Configurações do Listener
spring.kafka.listener.ack-mode=RECORD
spring.kafka.listener.missing-topics-fatal=false

# ======================================
# ? Hikari Connection Pool
# ======================================
spring.datasource.hikari.connection-timeout=30000
spring.datasource.hikari.maximum-pool-size=5
spring.datasource.hikari.minimum-idle=1
spring.datasource.hikari.idle-timeout=300000
spring.datasource.hikari.max-lifetime=1200000

# ======================================
# ? Actuator / Health Check
# ======================================
management.endpoints.web.exposure.include=*
management.endpoint.health.show-details=always
management.health.probes.enabled=true
management.health.db.enabled=true
management.health.diskspace.enabled=true

# Health check customizado para Kafka
management.health.kafka.enabled=true

# ======================================
# ? Logging
# ======================================
logging.level.com.funcoes=INFO
logging.level.org.springframework.kafka=INFO
logging.level.org.hibernate=WARN
logging.level.org.apache.kafka=WARN

# ======================================
# ? Retry / Resiliência
# ======================================
spring.retry.max-attempts=3
spring.retry.backoff.delay=1000

# ======================================
# ? Timeouts adicionais
# ======================================
spring.kafka.consumer.properties.session.timeout.ms=30000
spring.kafka.consumer.properties.heartbeat.interval.ms=10000
spring.kafka.consumer.properties.max.poll.interval.ms=300000