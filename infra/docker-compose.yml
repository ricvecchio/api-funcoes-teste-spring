version: '3.9'

services:
  # ======================================
  # PostgreSQL
  # ======================================
  postgres-db:
    image: postgres:15
    container_name: postgres-db
    environment:
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      POSTGRES_DB: ${DB_NAME}
    ports:
      - "${DB_PORT}:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER} -d ${DB_NAME}"]
      interval: 15s
      timeout: 10s
      retries: 10
      start_period: 30s

  # ======================================
  # Zookeeper
  # ======================================
  zookeeper:
    image: confluentinc/cp-zookeeper:7.3.0
    container_name: zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: ${ZOOKEEPER_PORT}
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - "${ZOOKEEPER_PORT}:${ZOOKEEPER_PORT}"
    healthcheck:
      test: ["CMD", "nc", "-z", "localhost", "${ZOOKEEPER_PORT}"]
      interval: 15s
      timeout: 10s
      retries: 10
      start_period: 30s

  # ======================================
  # Kafka Broker
  # ======================================
  kafka-broker:
    image: confluentinc/cp-kafka:7.3.0
    container_name: kafka-broker
    depends_on:
      zookeeper:
        condition: service_healthy
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:${ZOOKEEPER_PORT}
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka-broker:${KAFKA_BROKER_PORT}
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_CONFLUENT_SUPPORT_METRICS_ENABLE: 'false'
    ports:
      - "${KAFKA_BROKER_PORT}:${KAFKA_BROKER_PORT}"
    healthcheck:
      # Healthcheck confiável que aguarda o Kafka aceitar metadata requests
      test: ["CMD-SHELL", "cub kafka-ready -b localhost:${KAFKA_BROKER_PORT} 1 20 || exit 1"]
      interval: 15s
      timeout: 10s
      retries: 20
      start_period: 30s

  # ======================================
  # Conta Service
  # ======================================
  conta-service:
    build:
      context: ../conta-service
      dockerfile: Dockerfile
      args:
        SERVER_PORT: ${CONTA_SERVICE_PORT}
    image: conta-service:latest
    container_name: conta-service
    depends_on:
      postgres-db:
        condition: service_healthy
      kafka-broker:
        condition: service_healthy
    environment:
      SPRING_DATASOURCE_URL: jdbc:postgresql://postgres-db:${DB_PORT}/${DB_NAME}
      SPRING_DATASOURCE_USERNAME: ${DB_USER}
      SPRING_DATASOURCE_PASSWORD: ${DB_PASSWORD}
      KAFKA_BOOTSTRAP_SERVERS: kafka-broker:${KAFKA_BROKER_PORT}
      SERVER_PORT: ${CONTA_SERVICE_PORT}
    ports:
      - "${CONTA_SERVICE_PORT}:${CONTA_SERVICE_PORT}"
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:${CONTA_SERVICE_PORT}/actuator/health || exit 1"]
      interval: 15s
      timeout: 10s
      retries: 10
      start_period: 30s

  # ======================================
  # Kafka Service
  # ======================================
  kafka-service:
    build:
      context: ../kafka-service
      dockerfile: Dockerfile
      args:
        SERVER_PORT: ${KAFKA_SERVICE_PORT}
    image: kafka-service:latest
    container_name: kafka-service
    depends_on:
      postgres-db:
        condition: service_healthy
      kafka-broker:
        condition: service_healthy
    environment:
      SPRING_DATASOURCE_URL: jdbc:postgresql://postgres-db:${DB_PORT}/${DB_NAME}
      SPRING_DATASOURCE_USERNAME: ${DB_USER}
      SPRING_DATASOURCE_PASSWORD: ${DB_PASSWORD}
      KAFKA_BOOTSTRAP_SERVERS: kafka-broker:${KAFKA_BROKER_PORT}
      SERVER_PORT: ${KAFKA_SERVICE_PORT}
    ports:
      - "${KAFKA_SERVICE_PORT}:${KAFKA_SERVICE_PORT}"
    healthcheck:
      # Healthcheck confiável aguardando o Spring Boot iniciar
      test: ["CMD-SHELL", "curl -f http://localhost:${KAFKA_SERVICE_PORT}/actuator/health || exit 1"]
      interval: 15s
      timeout: 10s
      retries: 30
      start_period: 60s

volumes:
  postgres_data:
