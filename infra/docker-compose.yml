version: '3.8'

x-common-environment: &common-environment
  SPRING_PROFILES_ACTIVE: docker
  MANAGEMENT_ENDPOINT_HEALTH_SHOW_DETAILS: always
  MANAGEMENT_ENDPOINTS_WEB_EXPOSURE_INCLUDE: health,info,metrics
  LOGGING_LEVEL_ORG_SPRINGFRAMEWORK: INFO
  LOGGING_LEVEL_ORG_HIBERNATE: WARN
  LOGGING_LEVEL_ORG_APACHE_KAFKA: WARN

services:
  postgres:
    image: postgres:15-alpine
    container_name: postgres-db
    environment:
      POSTGRES_DB: conta_db
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: password
    ports:
      - "5432:5432"
    networks:
      - microservices-net
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d conta_db"]
      interval: 5s
      timeout: 5s
      retries: 20
      start_period: 10s

  zookeeper:
    image: confluentinc/cp-zookeeper:7.5.0
    container_name: zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - "2181:2181"
    networks:
      - microservices-net
    healthcheck:
      test: ["CMD-SHELL", "echo ruok | nc localhost 2181"]
      interval: 10s
      timeout: 5s
      retries: 15
      start_period: 20s

  kafka-broker:
    image: confluentinc/cp-kafka:7.5.0
    container_name: kafka-broker
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka-broker:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_LOG_RETENTION_MS: 300000
    ports:
      - "9092:9092"
    networks:
      - microservices-net
    depends_on:
      zookeeper:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "kafka-topics", "--bootstrap-server", "localhost:9092", "--list"]
      interval: 10s
      timeout: 15s
      retries: 20
      start_period: 60s

  conta-service:
    image: conta-service:latest
    build:
      context: ..
      dockerfile: conta-service/Dockerfile
    container_name: conta-service
    ports:
      - "8081:8080"
    environment:
      <<: *common-environment
      SPRING_DATASOURCE_URL: jdbc:postgresql://postgres:5432/conta_db
      SPRING_DATASOURCE_USERNAME: postgres
      SPRING_DATASOURCE_PASSWORD: password
      SPRING_KAFKA_BOOTSTRAP_SERVERS: kafka-broker:9092
      LOGGING_LEVEL_COM_FUNCOES: INFO
    networks:
      - microservices-net
    depends_on:
      postgres:
        condition: service_healthy
      kafka-broker:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/actuator/health"]
      interval: 15s
      timeout: 10s
      retries: 15
      start_period: 90s

  kafka-service:
    image: kafka-service:latest
    build:
      context: ..
      dockerfile: kafka-service/Dockerfile
    container_name: kafka-service
    ports:
      - "8082:8080"
    environment:
      <<: *common-environment
      SPRING_DATASOURCE_URL: jdbc:postgresql://postgres:5432/conta_db
      SPRING_DATASOURCE_USERNAME: postgres
      SPRING_DATASOURCE_PASSWORD: password
      SPRING_KAFKA_BOOTSTRAP_SERVERS: kafka-broker:9092
      SPRING_KAFKA_CONSUMER_GROUP_ID: kafka-service-group
      LOGGING_LEVEL_COM_FUNCOES: INFO
      LOGGING_LEVEL_ORG_SPRINGFRAMEWORK_KAFKA: INFO
    networks:
      - microservices-net
    depends_on:
      postgres:
        condition: service_healthy
      kafka-broker:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/actuator/health"]
      interval: 15s
      timeout: 10s
      retries: 20
      start_period: 120s

networks:
  microservices-net:
    driver: bridge

volumes:
  postgres_data: