# =========================
# üê≥ Docker Compose - Infraestrutura completa
# =========================
# ‚ö†Ô∏è Removido nada, apenas adicionamos o servi√ßo datadog-agent üê∂ e envs DD_*
version: "3.9"

services:
  # =========================
  # üêò PostgreSQL Database
  # =========================
  postgres-db:
    image: postgres:15
    container_name: postgres-db
    restart: always
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    ports:
      - "5432:5432"
    volumes:
      - pgdata:/var/lib/postgresql/data
    networks:
      - app-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 5s
      timeout: 5s
      retries: 10

  # =========================
  # ü¶ì Zookeeper
  # =========================
  zookeeper:
    image: confluentinc/cp-zookeeper:7.4.0
    container_name: zookeeper
    restart: always
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - "2181:2181"
    networks:
      - app-network
    healthcheck:
      test: ["CMD", "echo", "ruok", "|", "nc", "localhost", "2181"]
      interval: 5s
      timeout: 5s
      retries: 10

  # =========================
  # üß© Kafka Broker
  # =========================
  kafka-broker:
    image: confluentinc/cp-kafka:7.4.0
    container_name: kafka-broker
    restart: always
    depends_on:
      zookeeper:
        condition: service_healthy
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka-broker:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    networks:
      - app-network
    healthcheck:
      test: ["CMD-SHELL", "kafka-topics --bootstrap-server kafka-broker:9092 --list > /dev/null 2>&1"]
      interval: 10s
      timeout: 10s
      retries: 10

  # =========================
  # üßæ Log Service
  # =========================
  log-service:
    build:
      context: ../log-service
      dockerfile: Dockerfile
    container_name: log-service
    restart: always
    env_file: .env.local
    environment:
      SPRING_PROFILES_ACTIVE: docker
      SERVER_PORT: 8083
      # üê∂ Datadog APM vars
      DD_SERVICE: log-service
      DD_ENV: ${DD_ENV}
      DD_VERSION: ${DD_VERSION}
      DD_AGENT_HOST: datadog-agent
      DD_TRACE_ENABLED: "true"
      DD_LOGS_INJECTION: "true"
    ports:
      - "8083:8083"
    depends_on:
      postgres-db:
        condition: service_healthy
    networks:
      - app-network

  # =========================
  # üí≥ Conta Service
  # =========================
  conta-service:
    build:
      context: ../conta-service
      dockerfile: Dockerfile
    container_name: conta-service
    restart: always
    env_file: .env.local
    environment:
      SPRING_PROFILES_ACTIVE: docker
      SERVER_PORT: 8081
      KAFKA_BOOTSTRAP_SERVERS: kafka-broker:9092
      # üê∂ Datadog APM vars
      DD_SERVICE: conta-service
      DD_ENV: ${DD_ENV}
      DD_VERSION: ${DD_VERSION}
      DD_AGENT_HOST: datadog-agent
      DD_TRACE_ENABLED: "true"
      DD_LOGS_INJECTION: "true"
    ports:
      - "8081:8081"
    depends_on:
      postgres-db:
        condition: service_healthy
      kafka-broker:
        condition: service_healthy
      log-service:
        condition: service_started
    networks:
      - app-network

  # =========================
  # üîÑ Kafka Service
  # =========================
  kafka-service:
    build:
      context: ../kafka-service
      dockerfile: Dockerfile
    container_name: kafka-service
    restart: always
    env_file: .env.local
    environment:
      SPRING_PROFILES_ACTIVE: docker
      SERVER_PORT: 8082
      KAFKA_BOOTSTRAP_SERVERS: kafka-broker:9092
      SPRING_DATASOURCE_URL: jdbc:postgresql://postgres-db:5432/${POSTGRES_DB}
      SPRING_DATASOURCE_USERNAME: ${POSTGRES_USER}
      SPRING_DATASOURCE_PASSWORD: ${POSTGRES_PASSWORD}
      LOG_SERVICE_URL: http://log-service:8083/api/logs
      MANAGEMENT_DATADOG_METRICS_EXPORT_APIKEY: ${DATADOG_API_KEY}
      # üê∂ Datadog APM vars
      DD_SERVICE: kafka-service
      DD_ENV: ${DD_ENV}
      DD_VERSION: ${DD_VERSION}
      DD_AGENT_HOST: datadog-agent
      DD_TRACE_ENABLED: "true"
      DD_LOGS_INJECTION: "true"
    ports:
      - "8082:8082"
    depends_on:
      kafka-broker:
        condition: service_healthy
      postgres-db:
        condition: service_healthy
      log-service:
        condition: service_started
    networks:
      - app-network

  # =========================
  # üß≠ Kafka Topic Initializer
  # =========================
  kafka-init:
    image: confluentinc/cp-kafka:7.4.0
    container_name: kafka-init
    depends_on:
      kafka-broker:
        condition: service_healthy
    entrypoint: ["/bin/bash", "-c"]
    command: >
      echo "‚è≥ Aguardando Kafka iniciar...";
      sleep 10;
      kafka-topics --create --if-not-exists \
        --bootstrap-server kafka-broker:9092 \
        --replication-factor 1 \
        --partitions 1 \
        --topic conta-aberturas || echo "‚ö†Ô∏è  T√≥pico j√° existe";
    networks:
      - app-network

  # =========================
  # üê∂ Datadog Agent (NOVO)
  # =========================
  datadog-agent:
    image: gcr.io/datadoghq/agent:latest
    container_name: datadog-agent
    restart: always
    environment:
      DD_API_KEY: ${DATADOG_API_KEY}
      DD_SITE: ${DATADOG_SITE}
      DD_ENV: ${DD_ENV}
      DD_SERVICE: infra
      DD_VERSION: ${DD_VERSION}
      DD_APM_ENABLED: "true"
      DD_LOGS_ENABLED: "true"
      DD_PROCESS_AGENT_ENABLED: "true"
    ports:
      - "8126:8126" # porta padr√£o do agente
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - /proc/:/host/proc/:ro
      - /sys/fs/cgroup/:/host/sys/fs/cgroup:ro
      - /var/lib/docker/containers:/var/lib/docker/containers:ro
    networks:
      - app-network

networks:
  app-network:
    driver: bridge

volumes:
  pgdata:
