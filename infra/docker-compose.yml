version: '3.9'

services:
  # ======================================
  # PostgreSQL
  # ======================================
  postgres-db:
    image: postgres:15
    container_name: postgres-db
    environment:
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      POSTGRES_DB: ${DB_NAME}
    ports:
      - "${DB_PORT}:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER} -d ${DB_NAME}"]
      interval: 15s
      timeout: 10s
      retries: 10
      start_period: 30s

  # ======================================
  # Zookeeper
  # ======================================
  zookeeper:
    image: confluentinc/cp-zookeeper:7.3.0
    container_name: zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: ${ZOOKEEPER_PORT}
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - "${ZOOKEEPER_PORT}:${ZOOKEEPER_PORT}"
    healthcheck:
      test: ["CMD-SHELL", "echo stat | nc localhost ${ZOOKEEPER_PORT} | grep Mode"]
      interval: 15s
      timeout: 10s
      retries: 10
      start_period: 30s

  # ======================================
  # Kafka Broker
  # ======================================
  kafka-broker:
    image: confluentinc/cp-kafka:7.3.0
    container_name: kafka-broker
    depends_on:
      zookeeper:
        condition: service_healthy
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:${ZOOKEEPER_PORT}
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka-broker:${KAFKA_BROKER_PORT},PLAINTEXT_HOST://localhost:${KAFKA_BROKER_PORT}
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
    ports:
      - "${KAFKA_BROKER_PORT}:${KAFKA_BROKER_PORT}"
    healthcheck:
      test: ["CMD-SHELL", "kafka-topics --bootstrap-server kafka-broker:${KAFKA_BROKER_PORT} --list || exit 1"]
      interval: 20s
      timeout: 15s
      retries: 15
      start_period: 90s

  # ======================================
  # Conta Service
  # ======================================
  conta-service:
    build:
      context: ../conta-service
      dockerfile: Dockerfile
    image: conta-service:latest
    container_name: conta-service
    depends_on:
      postgres-db:
        condition: service_healthy
      kafka-broker:
        condition: service_healthy
    environment:
      SPRING_DATASOURCE_URL: jdbc:postgresql://postgres-db:5432/${DB_NAME}
      SPRING_DATASOURCE_USERNAME: ${DB_USER}
      SPRING_DATASOURCE_PASSWORD: ${DB_PASSWORD}
      KAFKA_BOOTSTRAP_SERVERS: kafka-broker:${KAFKA_BROKER_PORT}
      SERVER_PORT: 8080  # Porta interna fixa
    ports:
      - "${CONTA_SERVICE_PORT}:8080" # Porta externa = variável, interna = 8080
    healthcheck:
      # Usar health/liveness evita marcar o container como unhealthy apenas por dependências (Kafka/Postgres)
      # A liveness verifica se o processo está vivo; a readiness (quando usada) deve refletir dependências.
      test: ["CMD-SHELL", "curl -f http://localhost:8080/actuator/health/liveness || exit 1"]
      interval: 20s
      timeout: 15s
      retries: 18
      start_period: 120s

  # ======================================
  # Kafka Service
  # ======================================
  kafka-service:
    build:
      context: ../kafka-service
      dockerfile: Dockerfile
    image: kafka-service:latest
    container_name: kafka-service
    depends_on:
      postgres-db:
        condition: service_healthy
      kafka-broker:
        condition: service_healthy
    environment:
      SPRING_DATASOURCE_URL: jdbc:postgresql://postgres-db:5432/${DB_NAME}
      SPRING_DATASOURCE_USERNAME: ${DB_USER}
      SPRING_DATASOURCE_PASSWORD: ${DB_PASSWORD}
      KAFKA_BOOTSTRAP_SERVERS: kafka-broker:${KAFKA_BROKER_PORT}
      SERVER_PORT: 8080  # Porta interna fixa
    ports:
      - "${KAFKA_SERVICE_PORT}:8080" # Porta externa = variável, interna = 8080
    healthcheck:
      # Preferir liveness para sinalizar que o processo do Spring Boot levantou.
      # Para readiness (dependências externas) usar /actuator/health/readiness em checks de integração.
      test: ["CMD-SHELL", "curl -f http://localhost:8080/actuator/health/liveness || exit 1"]
      interval: 20s
      timeout: 15s
      retries: 18
      start_period: 120s

volumes:
  postgres_data:
