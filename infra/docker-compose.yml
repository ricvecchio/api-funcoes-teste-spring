services:
  # -------------------------------
  # Banco de dados PostgreSQL
  # -------------------------------
  postgres-db:
    image: postgres:15
    container_name: postgres-db
    environment:
      POSTGRES_DB: ${DB_NAME}
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
    ports:
      - "${DB_PORT}:5432"
    volumes:
      - pgdata:/var/lib/postgresql/data
    networks:
      - app-network

  # -------------------------------
  # Zookeeper (Kafka)
  # -------------------------------
  zookeeper:
    image: confluentinc/cp-zookeeper:7.4.0
    container_name: zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: ${ZOOKEEPER_PORT}
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - "${ZOOKEEPER_PORT}:${ZOOKEEPER_PORT}"
    networks:
      - app-network

  # -------------------------------
  # Kafka Broker
  # -------------------------------
  kafka-broker:
    image: confluentinc/cp-kafka:7.4.0
    container_name: kafka-broker
    depends_on:
      - zookeeper
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:${ZOOKEEPER_PORT}
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka-broker:${KAFKA_BROKER_PORT}
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
    ports:
      - "${KAFKA_BROKER_PORT}:${KAFKA_BROKER_PORT}"
    networks:
      - app-network

  # -------------------------------
  # Inicialização do tópico Kafka
  # -------------------------------
  kafka-init:
    image: confluentinc/cp-kafka:7.4.0
    container_name: kafka-init
    depends_on:
      - kafka-broker
    entrypoint:
      - bash
      - -c
      - |
        echo "Esperando Kafka Broker..."
        cub kafka-ready -b kafka-broker:9092 1 20
        echo "Criando tópico ${KAFKA_TOPIC_CONTAS_ABRIR}..."
        kafka-topics --create --bootstrap-server kafka-broker:9092 --replication-factor 1 --partitions 1 --topic ${KAFKA_TOPIC_CONTAS_ABRIR}
        echo "Tópico criado com sucesso."
        tail -f /dev/null
    networks:
      - app-network

  # -------------------------------
  # Conta Service
  # -------------------------------
  conta-service:
    build:
      context: ${CONTA_SERVICE_PATH}
    container_name: conta-service
    depends_on:
      - postgres-db
      - kafka-broker
      - kafka-init
    environment:
      SERVER_PORT: 8080
      SPRING_DATASOURCE_URL: jdbc:postgresql://postgres-db:5432/${DB_NAME}
      SPRING_DATASOURCE_USERNAME: ${DB_USER}
      SPRING_DATASOURCE_PASSWORD: ${DB_PASSWORD}
      KAFKA_BOOTSTRAP_SERVERS: kafka-broker:9092
    ports:
      - "${CONTA_SERVICE_PORT}:8080"
    networks:
      - app-network

  # -------------------------------
  # Kafka Service
  # -------------------------------
  kafka-service:
    build:
      context: ${KAFKA_SERVICE_PATH}
    container_name: kafka-service
    depends_on:
      - postgres-db
      - kafka-broker
      - kafka-init
    environment:
      SERVER_PORT: 8080
      SPRING_DATASOURCE_URL: jdbc:postgresql://postgres-db:5432/${DB_NAME}
      SPRING_DATASOURCE_USERNAME: ${DB_USER}
      SPRING_DATASOURCE_PASSWORD: ${DB_PASSWORD}
      KAFKA_BOOTSTRAP_SERVERS: kafka-broker:9092
    ports:
      - "${KAFKA_SERVICE_PORT}:8080"
    networks:
      - app-network

# -------------------------------
# Redes
# -------------------------------
networks:
  app-network:
    driver: bridge

# -------------------------------
# Volumes
# -------------------------------
volumes:
  pgdata:
