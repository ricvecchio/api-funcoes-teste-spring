version: "3.9"

services:
  # üêò Banco de dados PostgreSQL
  postgres-db:
    image: postgres:15
    container_name: postgres-db
    environment:
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      POSTGRES_DB: ${DB_NAME}
    ports:
      - "${DB_PORT}:5432" # Mapeia a porta do host para o container
    volumes:
      - postgres_data:/var/lib/postgresql/data # Volume persistente do banco

  # üê¶ Zookeeper (necess√°rio para o Kafka)
  zookeeper:
    image: confluentinc/cp-zookeeper:7.3.0
    container_name: zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: ${ZOOKEEPER_PORT}
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - "${ZOOKEEPER_PORT}:${ZOOKEEPER_PORT}" # Usa vari√°vel para maior flexibilidade

  # ü•® Kafka broker principal
  kafka-broker:
    image: confluentinc/cp-kafka:7.3.0
    container_name: kafka-broker
    depends_on:
      - zookeeper
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:${ZOOKEEPER_PORT}
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka-broker:${KAFKA_BROKER_PORT}
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
    ports:
      - "${KAFKA_BROKER_PORT}:${KAFKA_BROKER_PORT}"
    command:
      - sh
      - -c
      - |
        echo "üïí Esperando o Zookeeper ficar pronto..."
        # Aguarda at√© 30 tentativas de conex√£o com o Zookeeper antes de iniciar o Kafka
        /bin/bash -c 'for i in {1..30}; do nc -z zookeeper ${ZOOKEEPER_PORT} && break; echo "‚è≥ Tentando conectar ao Zookeeper... ($i/30)"; sleep 3; done'
        echo "‚úÖ Zookeeper pronto! Iniciando Kafka..."
        /etc/confluent/docker/run

  # üè¶ Conta Service (microservi√ßo REST principal)
  conta-service:
    build:
      context: ../conta-service
      dockerfile: Dockerfile
    image: conta-service:latest
    container_name: conta-service
    depends_on:
      - postgres-db
      - kafka-broker
    environment:
      # Configura√ß√£o de banco de dados (via vari√°veis .env)
      SPRING_DATASOURCE_URL: jdbc:postgresql://postgres-db:${DB_PORT}/${DB_NAME}
      SPRING_DATASOURCE_USERNAME: ${DB_USER}
      SPRING_DATASOURCE_PASSWORD: ${DB_PASSWORD}

      # Configura√ß√£o de Kafka
      KAFKA_BOOTSTRAP_SERVERS: kafka-broker:${KAFKA_BROKER_PORT}

    ports:
      - "${CONTA_SERVICE_PORT}:8080" # Porta interna fixa (8080), externa configur√°vel via vari√°vel

    command:
      - sh
      - -c
      - |
        echo "üïí Esperando Kafka e Postgres ficarem prontos..."
        # Garante que depend√™ncias estejam dispon√≠veis antes de iniciar
        /bin/bash -c 'for i in {1..30}; do nc -z kafka-broker ${KAFKA_BROKER_PORT} && nc -z postgres-db ${DB_PORT} && break; echo "‚è≥ Aguardando depend√™ncias... ($i/30)"; sleep 3; done'
        echo "‚úÖ Depend√™ncias dispon√≠veis! Iniciando aplica√ß√£o Spring Boot..."
        java -jar /app/app.jar

  # üîÑ Kafka Service (processamento ass√≠ncrono)
  kafka-service:
    build:
      context: ../kafka-service
      dockerfile: Dockerfile
    image: kafka-service:latest
    container_name: kafka-service
    depends_on:
      - kafka-broker
    environment:
      # Configura√ß√£o de Kafka via vari√°vel do .env
      KAFKA_BOOTSTRAP_SERVERS: kafka-broker:${KAFKA_BROKER_PORT}

      # Configura√ß√£o de banco de dados via vari√°vel (mesma estrutura que conta-service)
      SPRING_DATASOURCE_URL: jdbc:postgresql://postgres-db:${DB_PORT}/${DB_NAME}
      SPRING_DATASOURCE_USERNAME: ${DB_USER}
      SPRING_DATASOURCE_PASSWORD: ${DB_PASSWORD}

    ports:
      - "${KAFKA_SERVICE_PORT}:8080" # Porta interna fixa (8080), externa configur√°vel via vari√°vel

    command:
      - sh
      - -c
      - |
        echo "üïí Aguardando Kafka e Postgres ficarem prontos..."
        /bin/bash -c 'for i in {1..30}; do nc -z kafka-broker ${KAFKA_BROKER_PORT} && nc -z postgres-db ${DB_PORT} && break; echo "‚è≥ Aguardando depend√™ncias... ($i/30)"; sleep 3; done'
        echo "‚úÖ Depend√™ncias dispon√≠veis! Iniciando servi√ßo Kafka..."
        java -jar /app/app.jar

# Volume persistente para o banco
volumes:
  postgres_data: