version: '3.9'

services:
  # 🐘 Banco de dados PostgreSQL
  postgres-db:
    image: postgres:15
    container_name: postgres-db
    environment:
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      POSTGRES_DB: ${DB_NAME}
    ports:
      - "${DB_PORT}:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER} -d ${DB_NAME}"]
      interval: 20s
      timeout: 10s
      retries: 5
      start_period: 30s

  # 🐦 Zookeeper
  zookeeper:
    image: confluentinc/cp-zookeeper:7.3.0
    container_name: zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: ${ZOOKEEPER_PORT}
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - "${ZOOKEEPER_PORT}:${ZOOKEEPER_PORT}"
    healthcheck:
      test: ["CMD-SHELL", "nc -z localhost ${ZOOKEEPER_PORT}"]
      interval: 20s
      timeout: 10s
      retries: 5
      start_period: 30s

  # 🥨 Kafka Broker
  kafka-broker:
    image: confluentinc/cp-kafka:7.3.0
    container_name: kafka-broker
    depends_on:
      - zookeeper
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:${ZOOKEEPER_PORT}
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka-broker:${KAFKA_BROKER_PORT}
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
    ports:
      - "${KAFKA_BROKER_PORT}:${KAFKA_BROKER_PORT}"
    command: >
      sh -c "echo '🕒 Esperando Zookeeper ficar pronto...';
             for i in {1..30}; do nc -z zookeeper ${ZOOKEEPER_PORT} && break; echo '⏳ Tentando conectar ao Zookeeper... ($i/30)'; sleep 3; done;
             echo '✅ Zookeeper pronto! Iniciando Kafka...';
             /etc/confluent/docker/run"
    healthcheck:
      test: ["CMD-SHELL", "nc -z localhost ${KAFKA_BROKER_PORT}"]
      interval: 20s
      timeout: 10s
      retries: 5
      start_period: 30s

  # 🏦 Conta Service
  conta-service:
    build:
      context: ${CONTA_SERVICE_PATH}
      dockerfile: Dockerfile
    image: conta-service:latest
    container_name: conta-service
    depends_on:
      - postgres-db
      - kafka-broker
    environment:
      SPRING_DATASOURCE_URL: jdbc:postgresql://postgres-db:${DB_PORT}/${DB_NAME}
      SPRING_DATASOURCE_USERNAME: ${DB_USER}
      SPRING_DATASOURCE_PASSWORD: ${DB_PASSWORD}
      KAFKA_BOOTSTRAP_SERVERS: ${KAFKA_BOOTSTRAP_SERVERS}
    ports:
      - "${CONTA_SERVICE_PORT}:${CONTA_SERVICE_PORT}"
    command: >
      sh -c "echo '🕒 Esperando dependências...';
             for i in {1..30}; do nc -z kafka-broker ${KAFKA_BROKER_PORT} && nc -z postgres-db ${DB_PORT} && break; echo '⏳ Aguardando dependências... ($i/30)'; sleep 3; done;
             echo '✅ Dependências disponíveis! Iniciando aplicação Spring Boot...';
             java -jar /app/app.jar"
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:${CONTA_SERVICE_PORT}/actuator/health || exit 1"]
      interval: 20s
      timeout: 10s
      retries: 5
      start_period: 30s

  # 🥳 Kafka Service
  kafka-service:
    build:
      context: ${KAFKA_SERVICE_PATH}
      dockerfile: Dockerfile
    image: kafka-service:latest
    container_name: kafka-service
    depends_on:
      - kafka-broker
      - postgres-db
    environment:
      SPRING_DATASOURCE_URL: jdbc:postgresql://postgres-db:${DB_PORT}/${DB_NAME}
      SPRING_DATASOURCE_USERNAME: ${DB_USER}
      SPRING_DATASOURCE_PASSWORD: ${DB_PASSWORD}
      KAFKA_BOOTSTRAP_SERVERS: ${KAFKA_BOOTSTRAP_SERVERS}
    ports:
      - "${KAFKA_SERVICE_PORT}:${KAFKA_SERVICE_PORT}"
    command: >
      sh -c "echo '🕒 Esperando dependências...';
             for i in {1..30}; do nc -z kafka-broker ${KAFKA_BROKER_PORT} && nc -z postgres-db ${DB_PORT} && break; echo '⏳ Aguardando dependências... ($i/30)'; sleep 3; done;
             echo '✅ Dependências disponíveis! Iniciando aplicação Spring Boot...';
             java -jar /app/app.jar"
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:${KAFKA_SERVICE_PORT}/actuator/health || exit 1"]
      interval: 20s
      timeout: 10s
      retries: 5
      start_period: 30s

volumes:
  postgres_data:
