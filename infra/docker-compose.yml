version: "3.9"

services:
  # =========================
  # PostgreSQL
  # =========================
  postgres-db:
    image: postgres:15
    container_name: postgres-db
    restart: always
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    ports:
      - "5432:5432"
    volumes:
      - pgdata:/var/lib/postgresql/data
    networks:
      - app-network

  # =========================
  # Zookeeper
  # =========================
  zookeeper:
    image: confluentinc/cp-zookeeper:7.4.0
    container_name: zookeeper
    restart: always
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - "2181:2181"
    networks:
      - app-network

  # =========================
  # Kafka Broker
  # =========================
  kafka-broker:
    image: confluentinc/cp-kafka:7.4.0
    container_name: kafka-broker
    restart: always
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka-broker:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_LOG_RETENTION_HOURS: 168
      KAFKA_MESSAGE_MAX_BYTES: 2000000
    networks:
      - app-network

  # =========================
  # Log Service
  # =========================
  log-service:
    build:
      context: ../api-funcoes-teste-spring/log-service
      dockerfile: Dockerfile
    container_name: log-service
    restart: always
    ports:
      - "8083:8083"
    env_file: .env
    environment:
      SPRING_PROFILES_ACTIVE: dev
      SERVER_PORT: 8083
    networks:
      - app-network

  # =========================
  # Conta Service
  # =========================
  conta-service:
    build:
      context: ../api-funcoes-teste-spring/conta-service
      dockerfile: Dockerfile
    container_name: conta-service
    restart: always
    ports:
      - "8081:8081"
    env_file: .env
    environment:
      SPRING_PROFILES_ACTIVE: dev
      LOG_SERVICE_URL: http://log-service:8083/api/logs
      KAFKA_BOOTSTRAP_SERVERS: kafka-broker:9092
      KAFKA_TOPIC_CONTAS_ABRIR: ${KAFKA_TOPIC_CONTAS_ABRIR}
      DD_ENV: ${DD_ENV}
      DD_SERVICE: conta-service
      DD_VERSION: ${DD_VERSION}
      DATADOG_ENABLED: ${DATADOG_ENABLED}
      DATADOG_API_KEY: ${DATADOG_API_KEY}
      DATADOG_SITE: ${DATADOG_SITE}
    depends_on:
      - postgres-db
      - kafka-broker
      - log-service
    networks:
      - app-network

  # =========================
  # Kafka Service
  # =========================
  kafka-service:
    build:
      context: ../api-funcoes-teste-spring/kafka-service
      dockerfile: Dockerfile
    container_name: kafka-service
    restart: always
    ports:
      - "8082:8082"
    env_file: .env
    environment:
      SPRING_PROFILES_ACTIVE: dev
      LOG_SERVICE_URL: http://log-service:8083/api/logs
      KAFKA_BOOTSTRAP_SERVERS: kafka-broker:9092
      KAFKA_TOPIC_CONTAS_ABRIR: ${KAFKA_TOPIC_CONTAS_ABRIR}
      DD_ENV: ${DD_ENV}
      DD_SERVICE: kafka-service
      DD_VERSION: ${DD_VERSION}
      DATADOG_ENABLED: ${DATADOG_ENABLED}
      DATADOG_API_KEY: ${DATADOG_API_KEY}
      DATADOG_SITE: ${DATADOG_SITE}
    depends_on:
      - kafka-broker
      - log-service
    networks:
      - app-network

  # =========================
  # Inicializador de tópicos Kafka
  # =========================
  kafka-init:
    image: confluentinc/cp-kafka:7.4.0
    container_name: kafka-init
    depends_on:
      - kafka-broker
    entrypoint: ["/bin/bash", "-c"]
    command: >
      echo "⏳ Aguardando Kafka iniciar...";
      sleep 10;
      echo "✅ Criando tópico: ${KAFKA_TOPIC_CONTAS_ABRIR}";
      kafka-topics --create --if-not-exists
        --bootstrap-server kafka-broker:9092
        --replication-factor 1
        --partitions 1
        --topic ${KAFKA_TOPIC_CONTAS_ABRIR} ||
      echo "⚠️  Tópico já existe";
    networks:
      - app-network

networks:
  app-network:
    driver: bridge

volumes:
  pgdata:
