networks:
  microservices-net:
    driver: bridge

volumes:
  postgres-data:
  kafka-data:
  zookeeper-data:

services:
  postgres-db:
    image: postgres:15
    container_name: postgres-db
    restart: unless-stopped
    env_file: ../.env
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    ports:
      - "5432:5432"
    volumes:
      - postgres-data:/var/lib/postgresql/data
    networks:
      - microservices-net
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB} -h localhost"]
      interval: 10s
      timeout: 5s
      retries: 5

  zookeeper:
    image: confluentinc/cp-zookeeper:7.5.1
    container_name: zookeeper
    restart: unless-stopped
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - "2181:2181"
    volumes:
      - zookeeper-data:/var/lib/zookeeper/data
    networks:
      - microservices-net
    healthcheck:
      test: ["CMD-SHELL", "echo ruok | nc localhost 2181 | grep imok"]
      interval: 10s
      timeout: 5s
      retries: 5

  kafka-broker:
    image: confluentinc/cp-kafka:7.5.1
    container_name: kafka-broker
    restart: unless-stopped
    depends_on:
      zookeeper:
        condition: service_healthy
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://localhost:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_LOG_DIRS: /kafka/logs
    volumes:
      - kafka-data:/kafka/logs
    networks:
      - microservices-net
    healthcheck:
      test: ["CMD-SHELL", "kafka-topics --bootstrap-server localhost:9092 --list || exit 1"]
      interval: 10s
      timeout: 10s
      retries: 5

  conta-service:
    build:
      context: ./conta-service
      dockerfile: Dockerfile
    container_name: conta-service
    restart: unless-stopped
    depends_on:
      postgres-db:
        condition: service_healthy
      kafka-broker:
        condition: service_healthy
    env_file: ../.env
    ports:
      - "8080:8080"
    networks:
      - microservices-net
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  kafka-service:
    build:
      context: ./kafka-service
      dockerfile: Dockerfile
    container_name: kafka-service
    restart: unless-stopped
    depends_on:
      kafka-broker:
        condition: service_healthy
    env_file: ../.env
    ports:
      - "8081:8081"
    networks:
      - microservices-net
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"