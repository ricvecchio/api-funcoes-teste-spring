version: "3.9"

services:
  # PostgreSQL
  postgres-db:
    image: postgres:15
    container_name: postgres-db
    environment:
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      POSTGRES_DB: ${DB_NAME}
    ports:
      - "${DB_PORT}:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "${DB_USER}"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Zookeeper
  zookeeper:
    image: confluentinc/cp-zookeeper:7.3.0
    container_name: zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: ${ZOOKEEPER_PORT}
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - "${ZOOKEEPER_PORT}:${ZOOKEEPER_PORT}"
    healthcheck:
      test: ["CMD", "nc", "-z", "localhost", "${ZOOKEEPER_PORT}"]
      interval: 10s
      timeout: 5s
      retries: 10

  # Kafka Broker
  kafka-broker:
    image: confluentinc/cp-kafka:7.3.0
    container_name: kafka-broker
    depends_on:
      - zookeeper
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:${ZOOKEEPER_PORT}
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka-broker:${KAFKA_BROKER_PORT}
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
    ports:
      - "${KAFKA_BROKER_PORT}:${KAFKA_BROKER_PORT}"
    command:
      - sh
      - -c
      - |
        echo "üïí Esperando Zookeeper..."
        /bin/bash -c 'for i in {1..30}; do nc -z zookeeper ${ZOOKEEPER_PORT} && break; echo "‚è≥ Tentando Zookeeper ($i/30)"; sleep 3; done'
        echo "‚úÖ Zookeeper pronto! Iniciando Kafka..."
        /etc/confluent/docker/run
    healthcheck:
      test: ["CMD", "nc", "-z", "localhost", "${KAFKA_BROKER_PORT}"]
      interval: 10s
      timeout: 5s
      retries: 10

  # Conta Service
  conta-service:
    build:
      context: ${CONTA_SERVICE_PATH}
      dockerfile: Dockerfile
    image: conta-service:latest
    container_name: conta-service
    depends_on:
      - postgres-db
      - kafka-broker
    environment:
      SPRING_DATASOURCE_URL: jdbc:postgresql://postgres-db:${DB_PORT}/${DB_NAME}
      SPRING_DATASOURCE_USERNAME: ${DB_USER}
      SPRING_DATASOURCE_PASSWORD: ${DB_PASSWORD}
      KAFKA_BOOTSTRAP_SERVERS: kafka-broker:${KAFKA_BROKER_PORT}
    ports:
      - "${CONTA_SERVICE_PORT}:8080"
    command:
      - sh
      - -c
      - |
        echo "üïí Aguardando depend√™ncias..."
        /bin/bash -c 'for i in {1..30}; do nc -z kafka-broker ${KAFKA_BROKER_PORT} && nc -z postgres-db ${DB_PORT} && break; echo "‚è≥ Aguardando depend√™ncias ($i/30)"; sleep 3; done'
        echo "‚úÖ Depend√™ncias dispon√≠veis! Iniciando Conta Service..."
        java -jar /app/app.jar
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/actuator/health || exit 1"]
      interval: 20s
      timeout: 10s
      start_period: 60s
      retries: 10

  # Kafka Service
  kafka-service:
    build:
      context: ${KAFKA_SERVICE_PATH}
      dockerfile: Dockerfile
    image: kafka-service:latest
    container_name: kafka-service
    depends_on:
      - kafka-broker
      - postgres-db
    environment:
      SPRING_DATASOURCE_URL: jdbc:postgresql://postgres-db:${DB_PORT}/${DB_NAME}
      SPRING_DATASOURCE_USERNAME: ${DB_USER}
      SPRING_DATASOURCE_PASSWORD: ${DB_PASSWORD}
      KAFKA_BOOTSTRAP_SERVERS: kafka-broker:${KAFKA_BROKER_PORT}
    ports:
      - "${KAFKA_SERVICE_PORT}:8080"
    command:
      - sh
      - -c
      - |
        echo "üïí Aguardando depend√™ncias..."
        /bin/bash -c 'for i in {1..30}; do nc -z kafka-broker ${KAFKA_BROKER_PORT} && nc -z postgres-db ${DB_PORT} && break; echo "‚è≥ Aguardando depend√™ncias ($i/30)"; sleep 3; done'
        echo "‚úÖ Depend√™ncias dispon√≠veis! Iniciando Kafka Service..."
        java -jar /app/app.jar
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/actuator/health || exit 1"]
      interval: 20s
      timeout: 10s
      start_period: 180s
      retries: 20

volumes:
  postgres_data:
