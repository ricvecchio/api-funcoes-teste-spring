version: '3.9'

services:
  postgres:
    image: postgres:15-alpine
    container_name: postgres-db
    environment:
      POSTGRES_DB: ${DB_NAME:-conta_db}
      POSTGRES_USER: ${DB_USER:-postgres}
      POSTGRES_PASSWORD: ${DB_PASS:-password}
      POSTGRES_INITDB_ARGS: "--encoding=UTF8"
    ports:
      - "${POSTGRES_PORT:-5432}:5432"
    networks:
      - microservices-net
    command: >
      postgres
      -c max_connections=200
      -c shared_buffers=256MB
      -c effective_cache_size=1GB
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER:-postgres} -d ${DB_NAME:-conta_db}"]
      interval: 5s
      timeout: 5s
      retries: 10
      start_period: 5s

  zookeeper:
    image: confluentinc/cp-zookeeper:7.5.0
    container_name: zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: ${ZOOKEEPER_PORT:-2181}
      ZOOKEEPER_TICK_TIME: 2000
      ZOO_ENABLE_ADMIN: "true"
    ports:
      - "${ZOOKEEPER_PORT:-2181}:2181"
    networks:
      - microservices-net
    healthcheck:
      test: ["CMD", "bash", "-c", "zookeeper-shell localhost:${ZOOKEEPER_PORT:-2181} ls / > /dev/null 2>&1"]
      interval: 10s
      timeout: 10s
      retries: 15
      start_period: 25s

  kafka-broker:
    image: confluentinc/cp-kafka:7.5.0
    container_name: kafka-broker
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:${ZOOKEEPER_PORT:-2181}
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka-broker:${KAFKA_BROKER_PORT:-9092},PLAINTEXT_HOST://localhost:29092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    ports:
      - "${KAFKA_BROKER_PORT:-9092}:9092"
      - "29092:29092"
    networks:
      - microservices-net
    depends_on:
      zookeeper:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "bash", "-c", "kafka-broker-api-versions --bootstrap-server localhost:${KAFKA_BROKER_PORT:-9092} > /dev/null 2>&1"]
      interval: 10s
      timeout: 10s
      retries: 15
      start_period: 25s

  conta-service:
    build:
      context: ${CONTA_SERVICE_PATH:-../conta-service}
      dockerfile: Dockerfile
    container_name: conta-service
    depends_on:
      postgres:
        condition: service_healthy
      kafka-broker:
        condition: service_healthy
    environment:
      SPRING_DATASOURCE_URL: ${DB_URL:-jdbc:postgresql://postgres:5432/conta_db}
      SPRING_DATASOURCE_USERNAME: ${DB_USER:-postgres}
      SPRING_DATASOURCE_PASSWORD: ${DB_PASS:-password}
      SPRING_KAFKA_BOOTSTRAP_SERVERS: ${KAFKA_BOOTSTRAP_SERVERS:-kafka-broker:9092}
    ports:
      - "${CONTA_SERVICE_PORT:-8081}:8080"
    networks:
      - microservices-net
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:8080/actuator/health || exit 1"]
      interval: 10s
      timeout: 10s
      retries: 15
      start_period: 90s

  kafka-service:
    build:
      context: ${KAFKA_SERVICE_PATH:-../kafka-service}
      dockerfile: Dockerfile
    container_name: kafka-service
    depends_on:
      postgres:
        condition: service_healthy
      kafka-broker:
        condition: service_healthy
    environment:
      SPRING_DATASOURCE_URL: ${DB_URL:-jdbc:postgresql://postgres:5432/conta_db}
      SPRING_DATASOURCE_USERNAME: ${DB_USER:-postgres}
      SPRING_DATASOURCE_PASSWORD: ${DB_PASS:-password}
      SPRING_KAFKA_BOOTSTRAP_SERVERS: ${KAFKA_BOOTSTRAP_SERVERS:-kafka-broker:9092}
    ports:
      - "${KAFKA_SERVICE_PORT:-8082}:8080"
    networks:
      - microservices-net
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:8080/actuator/health || exit 1"]
      interval: 10s
      timeout: 10s
      retries: 15
      start_period: 90s

networks:
  microservices-net:
    driver: bridge